<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../../Reference_Guide.ent">
%BOOK_ENTITIES;
]>
<section id="chap-Reference_Guide-SSO_Single_Sign_On">
    <title>Single-Sign-On (SSO)</title>
  
        <para xml:id="sect-Reference_Guide-Single_Sign_On-Overview">
            &PRODUCT; provides some forms of Single Sign On (<literal>SSO</literal>) as an integration and aggregation platform.
        </para>
        <para>
            When logging into the portal, users gain access to many systems through portlets using a single identity. In many cases, however, the portal infrastructure must be integrated with other SSO enabled systems. There are many different Identity Management solutions available. In most cases, each SSO framework provides a unique way to plug into a Java EE application.
        </para>
        <para xml:id="sect-Reference_Guide-Overview_of_SSO-Prerequisite"><emphasis role="bold">Prerequisites</emphasis></para>
            <para>
                In this tutorial, the SSO server is installed in a Tomcat installation. Tomcat can be obtained from <ulink type="http" url="http://tomcat.apache.org">http://tomcat.apache.org</ulink>.
            </para>
            <para>
				   All the packages required for setup can be found in a latest zip file located under <ulink type="http" url="https://repository.jboss.org/nexus/content/groups/public/org/gatein/sso/sso-packaging/">this directory</ulink>.
               At this moment, latest version is <ulink type="http" url="https://repository.jboss.org/nexus/content/groups/public/org/gatein/sso/sso-packaging/1.1.2-Beta02/sso-packaging-1.1.2-Beta02.zip">here</ulink>.
               In this document, $GATEIN_SSO_HOME is called as the directory where the file is extracted.
            </para>
            <para>
                Users are advised to not run any portal extensions that could override the data when manipulating the <filename>gatein.ear</filename> file directly.
            </para>
        

   <section id="sect-Reference_Guide-SSO_Single_Sign_On-Enabling_SSO_using_JBoss_SSO_Valve">
      <title>Enabling SSO using JBoss SSO Valve</title>
<!--   Source Metadata
URL: https://issues.jboss.org/browse/JBQA-4530
Author [w/email]:  Marek Posolda  (mposolda@redhat.com)

URL: http://community.jboss.org/wiki/JBossWebSingleSignOn
Author [w/email]: Brian Stansberry (bstansberry@jboss.com)

URL: https://issues.jboss.org/browse/JBEPP-615
Author [w/email]: Marek Posolda  (mposolda@redhat.com)
  -->
      <para>
         The JBoss SSO valve is useful to authenticate a user on one &PRODUCT; node in a cluster and have that authentication automatically carry across to other nodes in the cluster.
      </para>

      <para>
         This authentication can also be used in any other web applications which may require authentication, <emphasis role="bold">provided that these applications use same roles as the main portal instance</emphasis>. Attempting to use an SSO authentication in an application that uses different roles may create authorization errors (<emphasis role="bold">403</emphasis> errors, for example).
      </para>

      <note>
         <para>
            This behavior is coming from the fact that the same JAAS principal is added by the SSO valve to all HTTP requests, even to other web applications.
            So the same roles are required because of it. There is alternative that you can configure SSO valve with the parameter <emphasis role="bold">requireReauthentication=true</emphasis>, which will force SSO valve to perform reauthentication with saved credentials in each HTTP request against security domain of particular web application where the request is coming.
            This will enforce that new principal for that web application will be created with updated roles for that web application.
            In other words, when <literal>requireReauthentication</literal> is <literal>false</literal> (default state), you need to have same roles among web applications.
            When <literal>requireReauthentication</literal> is <literal>true</literal>, you need to have the same username and passwords.
         </para>
      </note>

      <para>
        See <ulink type="http" url="http://community.jboss.org/wiki/JBossWebSingleSignOn" /> for more information about the JBoss SSO valve.
      </para>

      <procedure id="proc-Reference_Guide_eXo_JCR_1.14-Enabling_SSO_using_JBoss_SSO_Valve-SSO_Integration">
         <title>Do the SSO Integration</title>

         <step>
            <para>
               Open the <filename>/<replaceable>&lt;JBOSS_HOME&gt;</replaceable>/server/<replaceable>&lt;PROFILE&gt;</replaceable>/deploy/jbossweb.sar/server.xml</filename> file and uncomment one of the two <parameter>Valve</parameter> entries:
            </para>

            <itemizedlist>
               <listitem>
                  <para>
                     For a <emphasis>non-clustered</emphasis> implementation, uncomment:
                  </para>
<programlisting role="XML">&lt;Valve className="org.apache.catalina.authenticator.SingleSignOn" /&gt;
</programlisting>
               </listitem>

               <listitem>
                  <para>
                     For a <emphasis>clustered</emphasis> implementation, uncomment:
                  </para>
<programlisting role="XML">&lt;Valve className="org.jboss.web.tomcat.service.sso.ClusteredSingleSignOn" /&gt;
</programlisting>
               </listitem>
            </itemizedlist>
         </step>

         <step>
            <para>
               For integration of SSO valve among different nodes of cluster, you need to ensure that all these nodes share the same domain (for example <emphasis>node1.yourdomain.com</emphasis> and <emphasis>node2.yourdomain.com</emphasis>).
               This domain needs to be configured with the <emphasis role="bold">cookieDomain</emphasis> parameter of SSO valve. Thing is that SSO valve is adding cookie <emphasis role="bold">JSESSIONIDSSO</emphasis>,
               which is by default bound only to host where the request is coming. When the <literal>cookieDomain</literal> parameter is used, the cookie is bound to domain (like <emphasis>yourdomain.com</emphasis>),
               which will ensure that it is shared among both hosts <emphasis>node1.yourdomain.com</emphasis> and <emphasis>node2.yourdomain.com</emphasis>. So in this case, the valve configuration can look like this:
            </para>
<programlisting role="XML">&lt;Valve className="org.jboss.web.tomcat.service.sso.ClusteredSingleSignOn"
   cookieDomain="yourdomain.com" /&gt;
</programlisting>
         </step>

         <step>
            <para>
               Another important thing is that both cluster nodes need to be on the same cluster (using same parameter <emphasis role="bold">-g</emphasis> and same parameter <emphasis role="bold">-u</emphasis> and also using parameter <emphasis role="bold">-Dexo.profiles=cluster</emphasis>).
               It is also needed for them to share the same NFS directory and same database and apply all the configuration needed for the &PRODUCT; cluster.
            </para>
         </step>
      </procedure>

      <formalpara id="form-Reference_Guide_eXo_JCR_1.14-Enabling_SSO_using_JBoss_SSO_Valve-Enabling_SSO_in_a_physical_cluster">
         <title>Testing SSO in a physical cluster</title>

         <para>
            This example will try to simulate testing on more physical machines by simply using virtual hosts on a single machine.
         </para>
      </formalpara>

      <procedure>
         <step>
            <para>
               If you are on Linux, you can configure the <filename>/etc/hosts</filename> file which contains these lines:
             </para>
<programlisting>127.0.1.1 machine1.yourdomain.com
127.0.1.2 machine2.yourdomain.com</programlisting>
         </step>
         <step>
            <para>
               Open the <filename><replaceable>&lt;JBOSS_HOME&gt;</replaceable>/server/all/deploy/jbossweb.sar/server.xml</filename> file.
            </para>
         </step>

         <step>
            <para>
               Uncomment the line:
            </para>
<programlisting role="XML">&lt;!--
&lt;Valve className="org.jboss.web.tomcat.service.sso.ClusteredSingleSignOn" /&gt;
--&gt;</programlisting>
         </step>
         <step>
            <para>
               And edit it to match the following:
            </para>
<programlisting role="XML">&lt;Valve className="org.jboss.web.tomcat.service.sso.ClusteredSingleSignOn"
   cookieDomain="yourdomain.com" /&gt;</programlisting>
            <para>
               This will ensure the <literal>JSESSIONIDSSO</literal> cookie is used in the correct domain, allowing the SSO authentication to occur.
            </para>
         </step>

         <step>
            <para>
               Copy server configuration <emphasis role="bold">all</emphasis> and create another two configurations <emphasis role="bold">node1</emphasis> and <emphasis role="bold">node2</emphasis> from it.
            </para>
         </step>

         <step>
            <para>
               Start both cluster nodes with commands:
				<itemizedlist>
				<listitem>
					<command>./run.sh -c node1 -b machine1.yourdomain.com -Dexo.profiles=cluster -Djboss.messaging.ServerPeerID=0</command>
				</listitem>
				<listitem>
					<command>./run.sh -c node2 -b machine2.yourdomain.com -Dexo.profiles=cluster -Djboss.messaging.ServerPeerID=1</command>
				</listitem>
				</itemizedlist>
			</para>
         </step>

         <step>
            <para>
               Go to <ulink type="http" url="http://machine1.yourdomain.com:8080/portal">http://machine1.yourdomain.com:8080/portal</ulink> and log in as a user.
            </para>
         </step>

         <step>
            <para>
               Access some private URLs on the second host, such as <ulink type="http" url="http://machine2.yourdomain.com:8080/portal/dologin">http://machine2.yourdomain.com:8080/portal/dologin</ulink>.
               Now you should be logged directly into machine2 thanks to the SSO valve.
            </para>
         </step>

         <step>
            <para>
               Logout from SSO initiating machine1.yourdomain.com should also logged you out from other cluster nodes. So you should be logout directly from machine2 as well.
            </para>
         </step>

      </procedure>

      <formalpara id="form-Reference_Guide_eXo_JCR_1.14-Enabling_SSO_using_JBoss_SSO_Valve-Enabling_SSO_with_Other_Web_Applications">
         <title>Enabling SSO with other Web Applications</title>

         <para>
            As mentioned earlier, in order to use SSO authentication between JBoss Enterprise Portal Platform instances and other web applications, the roles defined in the web application must match those used in the portal instance
            (unless you have <emphasis>requireReauthentication=true</emphasis> as mentioned above).
         </para>
      </formalpara>

      <example>
        <para>To use the SSO Valve to authenticate a user in both a portal instance and the JMX Console, you need to open the <filename><replaceable>&lt;JBOSS_HOME&gt;</replaceable>/server/node1/deploy/jmx-console.war/WEB-INF/web.xml</filename> file and edit it as follows:
        </para>
		<itemizedlist>
			<listitem>
                  <para>
                     Change the <parameter>&lt;role-name&gt;</parameter> entry in the <parameter>&lt;auth-constraint&gt;</parameter> element (line <literal>110</literal>) from <literal>JBossAdmin</literal> to <literal>users</literal>:
                  </para>
<programlisting role="XML">&lt;auth-constraint&gt;
  &lt;!--&lt;role-name&gt;JBossAdmin&lt;/role-name&gt;--&gt;
  &lt;role-name&gt;users&lt;/role-name&gt;
&lt;/auth-constraint&gt;</programlisting>
               </listitem>

               <listitem>
                  <para>
                     Change the <parameter>&lt;role-name&gt;</parameter> entry in the <parameter>&lt;security-role&gt;</parameter> element (line <literal>120</literal>) from <literal>JBossAdmin</literal> to <literal>users</literal>:
                  </para>
<programlisting role="XML">&lt;security-role&gt;
  &lt;!--&lt;role-name&gt;JBossAdmin&lt;/role-name&gt;--&gt;
  &lt;role-name&gt;users&lt;/role-name&gt;
&lt;/security-role&gt;</programlisting>
               </listitem>
            </itemizedlist>
      </example>

      <formalpara id="form-Reference_Guide_eXo_JCR_1.14-Enabling_SSO_using_JBoss_SSO_Valve-Testing_SSO_With_Other_Web_Applications">
         <title>Testing SSO With Other Web Applications</title>

         <para>
            To test that SSO authentication is enabled from portal instances to other web applications (in this case, the JMX Console), do the following:
         </para>
      </formalpara>

      <procedure id="proc-Reference_Guide_eXo_JCR_1.14-Enabling_SSO_using_JBoss_SSO_Valve-Test_SSO_Between_Portal_and_JMX_Console">
         <title>Test SSO Between Portal and JMX Console</title>
         <step>
            <para>
               Start a portal instance on one node:
				<itemizedlist>
					<listitem>
						<command>./run.sh -c node1 -b machine1.yourdomain.com -Dexo.profiles=cluster -Djboss.messaging.ServerPeerID=0 &amp;</command>
					</listitem>
				</itemizedlist>
            </para>
         </step>
         <step>
            <para>
               Navigate to <ulink type="http" url="http://machine1.yourdomain.com:8080/portal/private/classic" /> and authenticate with the pre-configured user account "<systemitem>root</systemitem>" (password "<systemitem>gtn</systemitem>").
            </para>
         </step>
         <step>
            <para>
               Navigate to <ulink type="http" url="http://machine1.yourdomain.com:8080/jmx-console" />. You should be automatically authenticated into the JMX Console.
            </para>
         </step>
      </procedure>

      <formalpara id="form-Reference_Guide_eXo_JCR_1.14-Enabling_SSO_using_JBoss_SSO_Valve-Using_SSO_to_Authenticate_From_the_Public_Page">
         <title>Using SSO to Authenticate From the Public Page</title>

         <para>
            The previous configuration changes in this section are useful if a user is using a secured URL (<ulink type="http" url="http://localhost:8080/portal/private/classic" />, for example) to log in the portal instance.
         </para>
      </formalpara>

      <para>
         Further changes are needed; however, if the SSO authentication is required to work with the <guilabel>Sign In</guilabel> button on the front page of the portal (<ulink type="http" url="http://localhost:8080/portal/classic" />).
      </para>

      <para>
         To enable this functionality, the <guilabel>Sign In</guilabel> link must redirect to some secured URL, which will ensure that JAAS authentication will be enforced directly without showing login dialog.
      </para>

      <procedure id="proc-Reference_Guide_eXo_JCR_1.14-Enabling_SSO_using_JBoss_SSO_Valve-Redirect_to_Use_SSO_Valve_Authentication">
         <title>Redirect to Use SSO Valve Authentication</title>

         <step>
            <para>
               Open the file:
				<itemizedlist>
					<listitem>
						<filename><replaceable>&lt;JBOSS_HOME&gt;</replaceable>/server/<replaceable>&lt;PROFILE&gt;</replaceable>/deploy/gatein.ear/web.war/groovy/groovy/webui/component/UIBannerPortlet.gtml</filename>
					</listitem>
				</itemizedlist> 
            </para>
			<para>Then, edit the line:</para>
<programlisting role="JAVA">&lt;a class="Login"
   onclick="$signInAction"&gt;&lt;%=_ctx.appRes("UILoginForm.label.Signin")%&gt;&lt;/a&gt;
</programlisting>
            <para>
               To read:
            </para>
<programlisting role="JAVA">&lt;a class="Login"
   href="/portal/private/classic"&gt;&lt;%=_ctx.appRes("UILoginForm.label.Signin")%&gt;&lt;/a&gt;
</programlisting>
         </step>

         <step>
            <para>
               Open the <filename><replaceable>&lt;JBOSS_HOME&gt;</replaceable>/server/<replaceable>&lt;PROFILE&gt;</replaceable>/deploy/gatein.ear/web.war/groovy/portal/webui/component/UILogoPortlet.gtmpl</filename> file and change the line:
            </para>
<programlisting role="JAVA">&lt;a onclick="$signInAction"&gt;&lt;%=_ctx.appRes("UILogoPortlet.action.signin")%&gt;&lt;/a&gt;
</programlisting>
            <para>
               To read:
            </para>
<programlisting role="JAVA">&lt;a href="/portal/private/classic"&gt;&lt;%=_ctx.appRes("UILogoPortlet.action.signin")%&gt;&lt;/a&gt;
</programlisting>
         </step>
      </procedure>
   </section>
    
    <section id="sect-Reference_Guide-Single_Sign_On-CAS_Central_Authentication_Service">
        <title>Central Authentication Service (CAS)</title>
        <para>
            This Single Sign On plugin enables seamless integration between &PRODUCT; and the CAS Single Sign On Framework. Details about CAS can be found <ulink url="http://www.jasig.org/cas">here</ulink>.
        </para>
        <para>
            The integration consists of two parts:
			<itemizedlist>
				<listitem>
					<para>The first consists of installing or configuring a CAS server.</para>
				</listitem>
				<listitem>
					<para>The second consists of setting up the portal to use the CAS server.
					</para>
				</listitem>
			</itemizedlist>
        </para>
        <section id="sect-Reference_Guide-CAS_Central_Authentication_Service-CAS_server">
            <title>CAS server</title>
            <para>
                First, set up the server to authenticate against the portal login module. In this example, the CAS server is installed on Tomcat.
            </para>
            <section id="sect-Reference_Guide-CAS_server-Obtaining_CAS">
                <title>Obtaining CAS</title>
                <para>
                    CAS can be downloaded from <ulink type="http" url="http://www.jasig.org/cas/download">http://www.jasig.org/cas/download</ulink>.
                    The tested version which should work with these instructions is <emphasis role="bold">CAS 3.3.5</emphasis>. However, other versions can also work without problems.
                </para>
                <para>
                    Extract the downloaded file into a suitable location. This location will be referred to as <literal>$CAS_HOME</literal> in the following instructions.
                </para>
            </section>
            
            <section id="sect-Reference_Guide-CAS_server-Modifying_CAS_server">
                <title>Modifying the CAS server</title>
                <para>
                    To configure the web archive as desired, the simplest way is to make the necessary changes directly in the CAS codebase.
                </para>
            <note>
               <para>
                  To complete these instructions, and perform the final build step, you will need the Apache Maven 2.
                  You can get it <ulink type="http" url="http://maven.apache.org/download.html">here</ulink>.
               </para>
            </note>
                <para>
                    First, change the default authentication handler with the one provided by &PRODUCT;.
                </para>
                <para>
                    The CAS Server Plugin makes secure authentication callbacks to a RESTful service installed on the remote &PRODUCT; server to authenticate a user.
                </para>
                <para>
                    In order for the plugin to function correctly, it needs to be properly configured to connect to this service. This configuration is done via the <filename>cas.war/WEB-INF/deployerConfigContext.xml </filename> file.
                </para>
                <procedure>
                    <step>
                        <para>
                            Open <filename>CAS_HOME/cas-server-webapp/src/main/webapp/WEB-INF/deployerConfigContext.xml</filename>.
                        </para>
                    </step>
                    <step>
                        <para>
                            Replace
<programlisting> &#60;!--
  | Whereas CredentialsToPrincipalResolvers identify who it is some Credentials might authenticate, 
  | AuthenticationHandlers actually authenticate credentials.  Here e declare the AuthenticationHandlers that
  | authenticate the Principals that the CredentialsToPrincipalResolvers identified.  CAS will try these handlers in turn
  | until it finds one that both supports the Credentials presented and succeeds in authenticating.
  +--&#62;
 &#60;property name=&#34;authenticationHandlers&#34;&#62;
   &#60;list&#62;
     &#60;!--
      | This is the authentication handler that authenticates services by means of callback via SSL, thereby validating
      | a server side SSL certificate.
      +--&#62;
     &#60;bean class=&#34;org.jasig.cas.authentication.handler.support.HttpBasedServiceCredentialsAuthenticationHandler&#34;
           p:httpClient-ref=&#34;httpClient&#34; /&#62;
     &#60;!--
      | This is the authentication handler declaration that every CAS deployer will need to change before deploying CAS 
      | into production.  The default SimpleTestUsernamePasswordAuthenticationHandler authenticates UsernamePasswordCredentials
      | where the username equals the password.  You will need to replace this with an AuthenticationHandler that implements your
      | local authentication strategy.  You might accomplish this by coding a new such handler and declaring
      | edu.someschool.its.cas.MySpecialHandler here, or you might use one of the handlers provided in the adaptors modules.
      +--&#62;
     <emphasis role="bold">&#60;bean
        class=&#34;org.jasig.cas.authentication.handler.support.SimpleTestUsernamePasswordAuthenticationHandler&#34; /&#62;</emphasis>
   &#60;/list&#62;
 &#60;/property&#62;
</programlisting>                        
                        <para>
                            With the following that is also available in <filename>GATEIN_SSO_HOME/cas/plugin/WEB-INF/deployerConfigContext.xml</filename> (Make sure you set the host, port and context with the values corresponding to your portal).
                        </para>

<programlisting>&#60;!--
 | Whereas CredentialsToPrincipalResolvers identify who it is some Credentials might authenticate, 
 | AuthenticationHandlers actually authenticate credentials.  Here we declare the AuthenticationHandlers that
 | authenticate the Principals that the CredentialsToPrincipalResolvers identified.  CAS will try these handlers in turn
 | until it finds one that both supports the Credentials presented and succeeds in authenticating.
 +--&#62;
 &#60;property name=&#34;authenticationHandlers&#34;&#62;
   &#60;list&#62;
     &#60;!--
      | This is the authentication handler that authenticates services by means of callback via SSL, thereby validating
      | a server side SSL certificate.
      +--&#62;
     &#60;bean class=&#34;org.jasig.cas.authentication.handler.support.HttpBasedServiceCredentialsAuthenticationHandler&#34;
           p:httpClient-ref=&#34;httpClient&#34; /&#62;
     &#60;!--
      | This is the authentication handler declaration that every CAS deployer will need to change before deploying CAS 
      | into production.  The default SimpleTestUsernamePasswordAuthenticationHandler authenticates UsernamePasswordCredentials
      | where the username equals the password.  You will need to replace this with an AuthenticationHandler that implements your
      | local authentication strategy.  You might accomplish this by coding a new such handler and declaring
      | edu.someschool.its.cas.MySpecialHandler here, or you might use one of the handlers provided in the adaptors modules.
      +--&#62;
     &#60;!-- Integrates with the Gatein Authentication Service to perform authentication --&#62;
     &#60;!--
      | Note: Modify the Plugin Configuration based on the actual information of a GateIn instance.
      | The instance can be anywhere on the internet...Not necessarily on localhost where CAS is running 
      +--&#62;
     <emphasis role="bold">&#60;bean class=&#34;org.gatein.sso.cas.plugin.AuthenticationPlugin&#34;&#62;
        &#60;property name=&#34;gateInHost&#34;&#62;&#60;value&#62;localhost&#60;/value&#62;&#60;/property&#62;
        &#60;property name=&#34;gateInPort&#34;&#62;&#60;value&#62;8080&#60;/value&#62;&#60;/property&#62;
        &#60;property name=&#34;gateInContext&#34;&#62;&#60;value&#62;portal&#60;/value&#62;&#60;/property&#62;
     &#60;/bean&#62;</emphasis>
   &#60;/list&#62;
 &#60;/property&#62;
</programlisting>
                        </para>
                    </step>
                    <step>
                        <para>
                            Copy <filename>GATEIN_SSO_HOME/cas/plugin/WEB-INF/lib/sso-cas-plugin-&#60;VERSION&#62;.jar</filename> and <filename>GATEIN_SSO_HOME/cas/plugin/WEB-INF/lib/commons-httpclient-&#60;VERSION&#62;.jar</filename> into the <filename>CAS_HOME/cas-server-webapp/src/main/webapp/WEB-INF/lib</filename> created directory.
                        </para>
                    </step>
                    <step>
                        <para>
                            Get an installation of Tomcat and extract it into a suitable location (which will be called <filename>TOMCAT_HOME</filename> for these instructions). 
                        </para>
                        <para>
                            Change the default port to avoid a conflict with the default &PRODUCT; (for testing purposes). Edit <filename>TOMCAT_HOME/conf/server.xml</filename> and replace the 8080 port with 8888.
                            <note>
                                <para>
                                    If &PRODUCT; is running on the same machine as Tomcat, other ports need to be changed in addition to 8080 to avoid port conflicts.
                           They can be changed to any free port. For example, you can change admin port from 8005 to 8805, and AJP port from 8009 to 8809.
                                </para>
                            </note>
                        </para>
                    </step>
                    <step>
                        <para>
                            Go to <filename>CAS_HOME/cas-server-webapp</filename> and execute the <command>mvn install</command> command.
                        </para>
                    </step>
                    <step>
                        <para>
                            Copy <filename>CAS_HOME/cas-server-webapp/target/cas.war</filename> into <filename>TOMCAT_HOME/webapps</filename>.
                        </para>
                        <para>
                            Tomcat should start and be accessible at <ulink type="http" url="http://localhost:8888/cas">http://localhost:8888/cas</ulink>.
                        </para>
                        <mediaobject>
                            <imageobject>
                                <imagedata fileref="images/AuthenticationAndIdentity/SSO/cas.png" format="PNG" width="444" />
                            </imageobject>
                        </mediaobject>
					<note>
						<para>The login will not be available at this stage.</para>
					</note>
                    </step>
                </procedure>
            </section>
<note>
<para>
  By default on logout the CAS server will display the CAS logout page with a link to return to the portal. To make the CAS server redirect to the portal page after a logout, modify <filename>cas.war/WEB-INF/cas-servlet.xml</filename> to include the following lines:
</para>
<programlisting>&#60;bean id=&#34;logoutController&#34; class=&#34;org.jasig.cas.web.LogoutController&#34;
p:centralAuthenticationService-ref=&#34;centralAuthenticationService&#34;
p:logoutView=&#34;casLogoutView&#34;
p:warnCookieGenerator-ref=&#34;warnCookieGenerator&#34;
p:ticketGrantingTicketCookieGenerator-ref=&#34;ticketGrantingTicketCookieGenerator&#34;
<emphasis role="bold">p:followServiceRedirects=&#34;true&#34;/&#62;</emphasis>
</programlisting>
</note>
        </section>
        
        <section id="sect-Reference_Guide-CAS_Central_Authentication_Service-Setup_the_CAS_client">
            <title>Setup the CAS client</title>
            <procedure>
                <step>
                    <para>
                        Copy all libraries from <filename>GATEIN_SSO_HOME/cas/gatein.ear/lib</filename> into <filename>JBOSS_HOME/server/default/deploy/gatein.ear/lib</filename> (Or in Tomcat, into $<filename>GATEIN_HOME/lib</filename>).
                    </para>
                </step>
                <step>
                    <itemizedlist>
                        <listitem>
                            <para>
                            In JBoss AS, edit <filename>gatein.ear/META-INF/gatein-jboss-beans.xml</filename> and uncomment on this section:
                            </para>
<programlisting role="XML"><![CDATA[<authentication>
  <login-module code="org.gatein.sso.agent.login.SSOLoginModule" flag="required">
    <module-option name="portalContainerName">portal</module-option>
    <module-option name="realmName">gatein-domain</module-option>
  </login-module>
  <login-module code="org.exoplatform.services.security.j2ee.JbossLoginModule" flag="required">
    <module-option name="portalContainerName">portal</module-option>
    <module-option name="realmName">gatein-domain</module-option>
  </login-module>
</authentication>
]]></programlisting>
                        </listitem>
                        <listitem>
                            <para>
                            In Tomcat, edit <filename>GATEIN_HOME/conf/jaas.conf</filename>, uncomment on this section and comment other parts:
                            </para>         
<programlisting>org.gatein.sso.agent.login.SSOLoginModule required;
org.exoplatform.services.security.j2ee.TomcatLoginModule required
portalContainerName=portal
realmName=gatein-domain;
</programlisting>
                        </listitem>
                    </itemizedlist>
                </step>
                <step>
                   <para>
                      In Tomcat, edit <filename>GATEIN_HOME/webapps/portal.war/META-INF/context.xml</filename> and add
                      <literal>ServletAccessValve</literal> into configuration as first sub-element of <literal>Context</literal>:
                   </para>
                   <programlisting>
<![CDATA[
<Context path='/portal' docBase='portal' ... >

   ]]><emphasis role="bold"><![CDATA[<Valve className='org.gatein.sso.agent.tomcat.ServletAccessValve' />]]></emphasis><![CDATA[

   ...
</Context>
]]>
                   </programlisting>
                </step>
			</procedure>
			<note>
				<para>
					The installation can be tested at this point:
				
				<procedure>
					<step>
						<para>
							Start (or restart) &PRODUCT;, and (assuming the CAS server on Tomcat is running) direct your browser to <ulink type="http" url="http://localhost:8888/cas">http://localhost:8888/cas</ulink>.
						</para>
					</step>
					<step>
						<para>
							Login with the username <literal>root</literal> and the password <literal>gtn</literal> (or any account created through the portal).
						</para>
					</step>
				</procedure>
                </para>
			</note>
            
        </section>
        
        <section id="sect-Reference_Guide-CAS_Central_Authentication_Service-Redirect_to_CAS">
            <title>Redirect to CAS</title>
            <para>
                To utilize the Central Authentication Service, &PRODUCT; needs to redirect all user authentication to the CAS server.
            </para>
			<para>
                Information about where the CAS is hosted must be properly configured within the &PRODUCT; instance. The required configuration is done by modifying three files:
			</para>
                <itemizedlist>
                    <listitem>
                        <para>In the <filename>gatein.ear/web.war/groovy/groovy/webui/component/UIBannerPortlet.gtml</filename> file, modify the 'Sign In' link as follows:</para>
<programlisting>
<![CDATA[
<!--
<a class="Login" onclick="$signInAction"><%=_ctx.appRes("UILoginForm.label.Signin")%></a>
-->
<a class="Login" href="/portal/sso"><%=_ctx.appRes("UILoginForm.label.Signin")%></a>
]]>
</programlisting>
                        
                    </listitem>
                    <listitem>
                        <para>
                        In the <filename>gatein.ear/web.war/groovy/portal/webui/component/UILogoPortlet.gtmpl</filename> file, modify the 'Sign In' link as follows:
						</para>
<programlisting>
<![CDATA[
<!--
<a onclick="$signInAction"><%=_ctx.appRes("UILogoPortlet.action.signin")%></a>
-->
<a href="/portal/sso"><%=_ctx.appRes("UILogoPortlet.action.signin")%></a> 
]]>
</programlisting>
                        
                    </listitem>
                    <listitem>
                        <para>
                            Replace the entire content of <filename>gatein.ear/portal.war/login/jsp/login.jsp</filename> with:
                        </para>
<programlisting role="XML">&#60;html&#62;
  &#60;head&#62;
    &#60;script type=&#34;text/javascript&#34;&#62;
     window.location = &#39;/portal/sso&#39;;
    &#60;/script&#62;
  &#60;/head&#62;
  &#60;body&#62;
  &#60;/body&#62;
&#60;/html&#62;
</programlisting>
                    </listitem>
                    <listitem>
                        <para>
                            Add the following filters at the top of the filter chain in <filename>gatein.ear/portal.war/WEB-INF/web.xml</filename>.</para>

<programlisting role="XML"><![CDATA[<filter>
	<filter-name>LoginRedirectFilter</filter-name>
	<filter-class>org.gatein.sso.agent.filter.LoginRedirectFilter</filter-class>
	<init-param>
	  <!-- This should point to your SSO authentication server -->
	  <param-name>LOGIN_URL</param-name>
	  <!-- If casRenewTicket param value of InitiateLoginServlet is: not specified or false -->
	  <param-value>http://localhost:8888/cas/login?service=http://localhost:8080/portal/initiatessologin</param-value>
	  <!-- If casRenewTicket param value of InitiateLoginServlet is : true -->
	  <!-- <param-value>http://localhost:8888/cas/login?service=http://localhost:8080/portal/initiatessologin&amp;renew=true</param-value> -->
	</init-param>
</filter>
<filter>
	<filter-name>CASLogoutFilter</filter-name>
	<filter-class>org.gatein.sso.agent.filter.CASLogoutFilter</filter-class>
	<init-param>
	  <!-- This should point to your JOSSO authentication server -->
	  <param-name>LOGOUT_URL</param-name>
	  <param-value>http://localhost:8888/cas/logout</param-value>
	</init-param>
</filter>
<filter>
	<filter-name>InitiateLoginFilter</filter-name>
	<filter-class>org.gatein.sso.agent.filter.InitiateLoginFilter</filter-class>
	<init-param>
	  <param-name>ssoServerUrl</param-name>
	  <param-value>http://localhost:8888/cas</param-value>
	</init-param>
	<init-param>
	  <param-name>casRenewTicket</param-name>
	  <param-value>false</param-value>
	</init-param>
	<init-param>
	  <param-name>casServiceUrl</param-name>
	  <param-value>http://localhost:8080/portal/initiatessologin</param-value>
	</init-param>
	<init-param>
	  <param-name>loginUrl</param-name>
	  <param-value>http://localhost:8080/portal/dologin</param-value>
	</init-param>
</filter>

<!-- Mapping the filters at the very top of the filter chain -->
<filter-mapping>
   <filter-name>LoginRedirectFilter</filter-name>
   <url-pattern>/*</url-pattern>
</filter-mapping>
<filter-mapping>
   <filter-name>CASLogoutFilter</filter-name>
   <url-pattern>/*</url-pattern>
</filter-mapping>
<filter-mapping>
   <filter-name>InitiateLoginFilter</filter-name>
   <url-pattern>/initiatessologin</url-pattern>
</filter-mapping>]]></programlisting>
                    </listitem>
                </itemizedlist>
            <para>
                Once these changes have been made, all links to the user authentication pages will redirect to the CAS centralized authentication form.
            </para>
        </section>
    </section>
    
    <section id="sect-Reference_Guide-Single_Sign_On-JOSSO">
        <title>JOSSO</title>
        <para>
            This Single-Sign-On plugin enables the seamless integration between &PRODUCT; and the JOSSO Single-Sign-On Framework. Details about JOSSO can be found <ulink url="http://www.josso.org">here</ulink>.
        </para>
        <para>
            Setting up this integration consists of two steps: installing/configuring a JOSSO server, and setting up the portal to use the JOSSO server.
        </para>
        <section id="sect-Reference_Guide-JOSSO-JOSSO_server">
            <title>JOSSO server</title>
            <para>
                This section describes how to set up the JOSSO server to authenticate against the &PRODUCT; login module.
            </para>
            <para>
                In this example, the JOSSO server will be installed on Tomcat.
            </para>
            <section id="sect-Reference_Guide-JOSSO_server-Obtaining_JOSSO">
                <title>Obtaining JOSSO</title>
                <para>
                    JOSSO can be downloaded from <ulink type="http" url="http://sourceforge.net/projects/josso/files/">http://sourceforge.net/projects/josso/files/</ulink>. Use the package that embeds Apache Tomcat.
                </para>
                <para>
                    Once downloaded, extract the package into what will be called <filename>JOSSO_HOME</filename> in this example.
                </para>
        <warning>
          <para>The steps described later are only correct in case of JOSSO v.1.8.</para>
        </warning>
            </section>
            
            <section id="sect-Reference_Guide-JOSSO_server-Modifying_JOSSO_server">
                <title>Modifying the JOSSO server</title>
                <procedure>
                    <step>
                        <para>
                            If you have JOSSO 1.8.1, then copy the files from <filename>GATEIN_SSO_HOME/josso/josso-181/plugin</filename> into the Tomcat directory (<filename>JOSSO_HOME</filename>).
                        </para>
                        <para>
                          If you have JOSSO 1.8.2 or newer, then copy the files from <filename>GATEIN_SSO_HOME/josso/josso-182/plugin</filename> into the Tomcat directory (<filename>JOSSO_HOME</filename>).
                        </para>
                        <para>
                            This action should replace or add the following files to the <filename>JOSSO_HOME/webapps/josso/WEB-INF/lib</filename> directory:
                        </para>
                        <itemizedlist>
                            <listitem>
                                <para>
                                    <filename>JOSSO_HOME/lib/josso-gateway-config.xml</filename>
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    <filename>JOSSO_HOME/lib/josso-gateway-gatein-stores.xml</filename>
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    <filename>JOSSO_HOME/webapps/josso/WEB-INF/classes/gatein.properties</filename>
                                </para>
                            </listitem>
                        </itemizedlist>
                    </step>
                    <step>
                        <para>
                            Edit <filename>TOMCAT_HOME/conf/server.xml</filename> and replace the 8080 port to 8888 to change the default Tomcat port and avoid a conflict with the default &PRODUCT; port (for testing purposes).
                            <note>
                                <title>Port Conflicts</title>
                                <para>
                           If &PRODUCT; is running on the same machine as Tomcat, other ports need to be changed in addition to 8080 to avoid port conflicts.
                           They can be changed to any free port. For example, you can change the admin port from 8005 to 8805, and AJP port from 8009 to 8809.
                                </para>
                            </note>
                        </para>
                    </step>
                    <step>
                        <para>
                            Start Tomcat now that allows access to <ulink type="http" url="http://localhost:8888/josso/signon/login.do">http://localhost:8888/josso/signon/login.do</ulink>. However, at this stage, the login will not be available.
                        </para>
                        <mediaobject>
                            <imageobject>
                                <imagedata fileref="images/AuthenticationAndIdentity/SSO/opensso.png" format="PNG" width="444" />
                            </imageobject>
                        </mediaobject>
                    </step>
                </procedure>
            </section>

        </section>
        
        <section id="sect-Reference_Guide-JOSSO-Setup_the_JOSSO_client">
            <title>Setup the JOSSO client</title>
            <note>
			<para>
               There are some changes in JOSSO agent api among versions 1.8.1 and 1.8.2, which means that you need to use different modules for different JOSSO versions.
               In next section, you will use directory with the <emphasis role="bold">josso-18X</emphasis> key, which will be <emphasis>josso-181</emphasis> directory if you
               have JOSSO 1.8.1 and <emphasis>josso-182</emphasis> if you have JOSSO 1.8.2 or newer.
            </para>
			</note>
            <procedure>
                <step>
                    <para>
                        Copy the library files from <filename>GATEIN_SSO_HOME/josso/josso-18X/gatein.ear/lib</filename> into <filename>gatein.ear/lib</filename> (or into <filename>GATEIN_HOME/lib</filename> if &PRODUCT; is  running in Tomcat).
                    </para>
                </step>
            <step>
               <para>
                  Copy the <filename>GATEIN_SSO_HOME/josso/josso-18X/gatein.ear/portal.war/WEB-INF/classes/josso-agent-config.xml</filename> file into <filename>gatein.ear/portal.war/WEB-INF/classes</filename> (or into <filename>GATEIN_HOME/webapps/portal.war/WEB-INF/classes</filename>, or <filename>GATEIN_HOME/conf</filename> if &PRODUCT; is  running in Tomcat).
               </para>
            </step>
                <step>
                    <itemizedlist>
                        <listitem>
                            <para>
                                In JBoss AS, edit <filename>gatein.ear/META-INF/gatein-jboss-beans.xml</filename> and uncomment this section:
                            </para>
<programlisting><![CDATA[
<authentication>
  <login-module code="org.gatein.sso.agent.login.SSOLoginModule" flag="required">
    <module-option name="portalContainerName">portal</module-option>
    <module-option name="realmName">gatein-domain</module-option>
  </login-module>
  <login-module code="org.exoplatform.services.security.j2ee.JbossLoginModule" flag="required">
    <module-option name="portalContainerName">portal</module-option>
    <module-option name="realmName">gatein-domain</module-option>
  </login-module>
</authentication>
]]>
</programlisting>
                        </listitem>
                        <listitem>
                            <para>
                                In Tomcat, edit <filename>GATEIN_HOME/conf/jaas.conf</filename> and uncomment this section:
                            </para>
<programlisting>org.gatein.sso.agent.login.SSOLoginModule required;
org.exoplatform.services.security.j2ee.TomcatLoginModule required
portalContainerName=portal
realmName=gatein-domain;
</programlisting>
                        </listitem>
                    </itemizedlist>
                </step>
                <step>
                  <para>
                     In Tomcat, edit <filename>GATEIN_HOME/webapps/portal.war/META-INF/context.xml</filename> and add
                     <literal>ServletAccessValve</literal> into configuration as first sub-element of <literal>Context</literal>:
                  </para>
                  <programlisting>
                     <![CDATA[
<Context path='/portal' docBase='portal' ... >

   ]]><emphasis role="bold"><![CDATA[<Valve className='org.gatein.sso.agent.tomcat.ServletAccessValve' />]]></emphasis><![CDATA[

   ...
</Context>
]]>
                  </programlisting>
                </step>
			</procedure>
                <note>
                    <para>
                        The installation can be tested at this point.
                    <procedure>
                        <step>
                            <para>
                                Start (or restart) &PRODUCT;, and (assuming the JOSSO server on Tomcat is running) direct your browser to <ulink type="http" url="http://localhost:8888/josso/signon/login.do">http://localhost:8888/josso/signon/login.do</ulink>.
                            </para>
                        </step>
                        <step>
                            <para>
                                Login with the username <literal>root</literal> and the password <literal>gtn</literal> or any account created through the portal.
                            </para>
                        </step>
                    </procedure>
					</para>
			</note>
        </section>
        
        <section id="sect-Reference_Guide-JOSSO-Setup_the_portal_to_redirect_to_JOSSO">
            <title>Setup the portal to redirect to JOSSO</title>
            <para>
                The next part of the process is to redirect all user authentication to the JOSSO server.
            </para>
            <para>
                Information about where the JOSSO server is hosted must be properly configured within the &PRODUCT; instance. The required configuration is done by modifying four files:
			</para>
                <itemizedlist>
                    <listitem>
                        <para>
                        In the <filename>gatein.ear/web.war/groovy/groovy/webui/component/UIBannerPortlet.gtml</filename> file, modify the 'Sign In' link as follows:
<programlisting><![CDATA[
<!--
<a class="Login" onclick="$signInAction"><%=_ctx.appRes("UILoginForm.label.Signin")%></a>
-->
<a class="Login" href="/portal/sso"><%=_ctx.appRes("UILoginForm.label.Signin")%></a>
]]>
</programlisting>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                        In the <filename>gatein.ear/web.war/groovy/portal/webui/component/UILogoPortlet.gtmpl</filename> file, modify the 'Sign In' link as follows:
<programlisting><![CDATA[
<!--
<a onclick="$signInAction"><%=_ctx.appRes("UILogoPortlet.action.signin")%></a>
-->
<a href="/portal/sso"><%=_ctx.appRes("UILogoPortlet.action.signin")%></a> 
]]>
</programlisting>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Replace the entire content of <filename>gatein.ear/portal.war/login/jsp/login.jsp</filename> with:
                        </para>
<programlisting>&#60;html&#62;
  &#60;head&#62;
    &#60;script type=&#34;text/javascript&#34;&#62;
     window.location = &#39;/portal/sso&#39;;
    &#60;/script&#62;
  &#60;/head&#62;
  &#60;body&#62;
  &#60;/body&#62;
&#60;/html&#62;
</programlisting>
                    </listitem>
                    <listitem>
                        <para>
                            Add the following filters at the top of the filter chain in <filename>gatein.ear/portal.war/WEB-INF/web.xml</filename>.
						</para>

<programlisting role="XML"><![CDATA[<filter>
   <filter-name>LoginRedirectFilter</filter-name>
   <filter-class>org.gatein.sso.agent.filter.LoginRedirectFilter</filter-class>
   <init-param>
      <!-- This should point to your SSO authentication server -->
      <param-name>LOGIN_URL</param-name>
      <param-value>http://localhost:8888/josso/signon/login.do?josso_back_to=http://localhost:8080/portal/initiatessologin</param-value>
   </init-param>
</filter>
<filter>
   <filter-name>JOSSOLogoutFilter</filter-name>
   <filter-class>org.gatein.sso.agent.filter.JOSSOLogoutFilter</filter-class>
   <init-param>
      <!-- This should point to your JOSSO authentication server -->
      <param-name>LOGOUT_URL</param-name>
      <param-value>http://localhost:8888/josso/signon/logout.do</param-value>
   </init-param>
</filter>
<filter>
   <filter-name>InitiateLoginFilter</filter-name>
   <filter-class>org.gatein.sso.agent.filter.InitiateLoginFilter</filter-class>
   <init-param>
      <param-name>ssoServerUrl</param-name>
      <param-value>http://localhost:8888/josso/signon/login.do</param-value>
   </init-param>
   <init-param>
      <param-name>loginUrl</param-name>
      <param-value>http://localhost:8080/portal/dologin</param-value>
   </init-param>
</filter>

<!-- Mapping the filters at the very top of the filter chain -->
<filter-mapping>
   <filter-name>LoginRedirectFilter</filter-name>
   <url-pattern>/*</url-pattern>
</filter-mapping>
<filter-mapping>
   <filter-name>JOSSOLogoutFilter</filter-name>
   <url-pattern>/*</url-pattern>
</filter-mapping>
<filter-mapping>
   <filter-name>InitiateLoginFilter</filter-name>
   <url-pattern>/initiatessologin</url-pattern>
</filter-mapping>]]></programlisting>   
                    </listitem>
                </itemizedlist>
            <para>
                From now on, all links redirecting to the user authentication pages will redirect to the JOSSO centralized authentication form.
            </para>
        </section>

    </section>
    
    <section id="sect-Reference_Guide-Single_Sign_On-OpenSSO_The_Open_Web_SSO_project">
        <title>OpenSSO - Open Web SSO project</title>
        <para>
            Setting up this integration involves two steps. The first step is to install or configure an OpenSSO server, and the second is to set up the portal to use the OpenSSO server.
        </para>
        <section id="sect-Reference_Guide-OpenSSO_The_Open_Web_SSO_project-OpenSSO_server">
            <title>OpenSSO server</title>
            <para>
                 This section details the setting up of OpenSSO server to authenticate against the &PRODUCT; login module.
            </para>
            <para>
                In this example, the OpenSSO server will be installed on Tomcat.
            </para>
            <section id="sect-Reference_Guide-OpenSSO_server-Obtaining_OpenSSO">
                <title>Obtaining OpenSSO</title>
                <para>
                    OpenSSO must be purchased from <ulink type="http" url="http://www.oracle.com/technetwork/middleware/id-mgmt/overview/index.html">Oracle</ulink>.
                </para>
                <para>
                    For testing purpose, you will need to use OpenSSO_80U2 that can be downloaded from <ulink type="http" url="http://download.oracle.com/otn/nt/middleware/11g/oracle_opensso_80U2.zip">Oracle</ulink>.
                </para>
                <para>
                    Once downloaded, extract the package into a suitable location. This location will be referred to as <filename>OPENSSO_HOME</filename> in this example.
                </para>
                <note>
                   <para>
                       There is also possibility to use OpenAM instead of OpenSSO server. OpenAM is free and integration steps with &PRODUCT; and OpenAM are very similar as with OpenSSO. See 
                       <ulink type="http" url="http://community.jboss.org/wiki/GateInAndOpenAMIntegration">here</ulink> for more information.
                   </para>
                </note>
            </section>
            
            <section id="sect-Reference_Guide-OpenSSO_server-Modifying_OpenSSO_server">
                <title>Modifying the OpenSSO server</title>
                <para>
                     To configure the web server as desired, it is simpler to directly modify the sources. 
                </para>
                <para>
                    The first step is to add the &PRODUCT; Authentication Plugin:
                </para>
                <para>
                    The plugin makes secure authentication callbacks to a RESTful service installed on the remote &PRODUCT; server to authenticate a user.
                </para>
                <para>
                    In order for the plugin to function correctly, it needs to be properly configured to connect to this service. This configuration is done via the <filename>opensso.war/config/auth/default/AuthenticationPlugin.xml</filename> file.
                </para>
                <procedure>
                    <step>
                        <para>
                            Obtain a copy of Tomcat and extract it into a suitable location (this location will be referred to as <filename>TOMCAT_HOME</filename> in this example).
                        </para>
                    </step>
                    <step>
                        <para>
                            Change the default port to avoid a conflict with the default &PRODUCT; port (for testing purposes) by editing <filename>TOMCAT_HOME/conf/server.xml</filename> and replacing the 8080 port with 8888.
                            <note>
                                <para>
                           If &PRODUCT; is running on the same machine as Tomcat, other ports need to be changed in addition to 8080 to avoid port conflicts.
                           They can be changed to any free port. For example, you can change the admin port from 8005 to 8805, and AJP port from 8009 to 8809.
                                </para>
                            </note>
                        </para>
                    </step>
                    <step>
                        <para>
                            Ensure the <filename>TOMCAT_HOME/webapps/opensso/config/auth/default/AuthenticationPlugin.xml</filename> file looks like this:
						</para>
<programlisting role="JAVA">&#60;?xml version=&#39;1.0&#39; encoding=&#34;UTF-8&#34;?&#62;

&#60;!DOCTYPE ModuleProperties PUBLIC &#34;=//iPlanet//Authentication Module Properties XML Interface 1.0 DTD//EN&#34;
          &#34;jar://com/sun/identity/authentication/Auth_Module_Properties.dtd&#34;&#62;

&#60;ModuleProperties moduleName=&#34;AuthenticationPlugin&#34; version=&#34;1.0&#34; &#62;
  &#60;Callbacks length=&#34;2&#34; order=&#34;1&#34; timeout=&#34;60&#34;
             header=&#34;GateIn OpenSSO Login&#34; &#62;    
    &#60;NameCallback&#62;
      &#60;Prompt&#62;
        Username
      &#60;/Prompt&#62;
    &#60;/NameCallback&#62;
    &#60;PasswordCallback echoPassword=&#34;false&#34; &#62;
      &#60;Prompt&#62;
        Password
      &#60;/Prompt&#62;
    &#60;/PasswordCallback&#62;
  &#60;/Callbacks&#62;
&#60;/ModuleProperties&#62;
</programlisting>
                        
                    </step>
                    <step>
                        <para>
                            Copy <filename>GATEIN_SSO_HOME/opensso/plugin/WEB-INF/lib/sso-opensso-plugin-&#60;VERSION&#62;.jar</filename>, <filename>GATEIN_SSO_HOME/opensso/plugin/WEB-INF/lib/commons-httpclient-&#60;VERSION&#62;.jar</filename>, and <filename>GATEIN_SSO_HOME/opensso/plugin/WEB-INF/lib/commons-logging-&#60;VERSION&#62;.jar</filename> into the Tomcat directory at <filename>TOMCAT_HOME/webapps/opensso/WEB-INF/lib</filename>.
                        </para>
                    </step>
                    <step>
                        <para>
                            Copy <filename>GATEIN_SSO_HOME/opensso/plugin/WEB-INF/classes/gatein.properties</filename> into <filename>TOMCAT_HOME/webapps/opensso/WEB-INF/classes</filename>.
                        </para>
                    </step>

                    <step>
                        <para>
                            Start Tomcat to be able to access <ulink type="http" url="http://localhost:8888/opensso/UI/Login?realm=gatein">http://localhost:8888/opensso/UI/Login?realm=gatein</ulink>. Login will not be available at this point.
                        </para>
                        <mediaobject>
                            <imageobject>
                                <imagedata fileref="images/AuthenticationAndIdentity/SSO/opensso-shot.png" format="PNG" />
                            </imageobject>
                        </mediaobject>
                    </step>
            </procedure>
            <para><emphasis role="bold">Configure the "gatein" realm</emphasis></para>
            <procedure>
               <step>
                     <para>Direct your browser to <ulink type="http" url="http://localhost:8888/opensso">http://localhost:8888/opensso</ulink>.</para>
               </step>
               <step>
                     <para>Create the default configuration.</para>
               </step>
               <step>
                     <para>Login as <literal>amadmin</literal> and then go to <menuchoice><guimenu>Configuration</guimenu> <guimenuitem>Authentication</guimenuitem></menuchoice>. Next, select the <emphasis role="bold">Core</emphasis> link, 
                        and add new value and fill in the <classname>org.gatein.sso.opensso.plugin.AuthenticationPlugin</classname> class name.
                        This step is really important. Without it, <literal>AuthenticationPlugin</literal> is not available among other OpenSSO authentication modules.
                     </para>
               </step>
               <step>
                  <para>Go to the <emphasis role="bold">Access control</emphasis> tab and create a new realm called <literal>gatein</literal>.</para>
               </step>
               <step>
                  <para>Go to the "gatein" realm, and click on the <emphasis role="bold">Authentication</emphasis> tab. At the bottom in the <emphasis role="bold">Authentication chaining</emphasis> section, click on <emphasis role="bold">ldapService</emphasis>.
                     Here change the selection from "Datastore", which is the default module in the authentication chain, to <emphasis role="bold">AuthenticationPlugin</emphasis>.
                     This enables authentication of the "gatein" realm by using GateIn REST service instead of the OpenSSO LDAP server.</para>
               </step>
               <step>
                  <para>
                     Go to <emphasis role="bold">Advanced properties</emphasis> and change UserProfile from "Required" to <emphasis role="bold">Dynamic</emphasis>. This step is needed
                     because &PRODUCT; users are not in OpenSSO Datastore (LDAP server), so their profiles can not be obtained
                     if "Required" is active. By using "Dynamic", all new users are automatically
                     created in OpenSSO datastore after successful authentication.
                  </para>
               </step>
               <step>
                  <para>
                     Increase the user privileges to allow REST access. Go to <menuchoice><guimenu>Access control</guimenu> 
                     <guisubmenu>Top level realm</guisubmenu><guisubmenu>Privileges</guisubmenu> <guimenuitem>All authenticated users</guimenuitem></menuchoice>, and check the last two checkboxes:
                     <itemizedlist>
                        <listitem><guilabel>Read and write access only for policy properties</guilabel></listitem>
                        <listitem><guilabel>Read and write access to all realm and policy properties</guilabel></listitem>
                     </itemizedlist>
                  </para>
               </step>
               <step>
                  <para>Repeat previous step with increasing privileges for the <emphasis role="bold">gatein</emphasis> realm as well.</para>
               </step>
            </procedure>
         </section>
        </section>
        
        <section id="sect-Reference_Guide-OpenSSO_The_Open_Web_SSO_project-Setup_the_OpenSSO_client">
            <title>Setup the OpenSSO client</title>
            <procedure>
                <step>
                    <para>
                        Copy all libraries from <filename>GATEIN_SSO_HOME/opensso/gatein.ear/lib</filename> into <filename>JBOSS_HOME/server/default/deploy/gatein.ear/lib</filename> (Or, in Tomcat, into <filename>GATEIN_HOME/lib</filename>).
                    </para>
                </step>
                <step>
                    <itemizedlist>
                        <listitem>
                            <para>
                                In JBoss AS, edit <filename>gatein.ear/META-INF/gatein-jboss-beans.xml</filename> and uncomment this section:
                            </para>
<programlisting role="XML"><![CDATA[<authentication>
  <login-module code="org.gatein.sso.agent.login.SSOLoginModule" flag="required">
    <module-option name="portalContainerName">portal</module-option>
    <module-option name="realmName">gatein-domain</module-option>
  </login-module>
  <login-module code="org.exoplatform.services.security.j2ee.JbossLoginModule" flag="required">
    <module-option name="portalContainerName">portal</module-option>
    <module-option name="realmName">gatein-domain</module-option>
  </login-module>
</authentication>
]]></programlisting>

                        </listitem>
                        <listitem>
                            <para>
                                If you are running &PRODUCT; in Tomcat, edit <filename>GATEIN_HOME/conf/jaas.conf</filename>, uncomment on this section and comment other parts:
                            </para>
<programlisting>org.gatein.sso.agent.login.SSOLoginModule required;
org.exoplatform.services.security.j2ee.TomcatLoginModule required
portalContainerName=portal
realmName=gatein-domain;
</programlisting>

                        </listitem>
                    </itemizedlist>
                </step>
                <step>
                  <para>
                     In Tomcat, edit <filename>GATEIN_HOME/webapps/portal.war/META-INF/context.xml</filename> and add
                     <literal>ServletAccessValve</literal> into configuration as first sub-element of <literal>Context</literal>:
                  </para>
<programlisting><![CDATA[<Context path='/portal' docBase='portal' ... >

   ]]><emphasis role="bold"><![CDATA[<Valve className='org.gatein.sso.agent.tomcat.ServletAccessValve' />]]></emphasis><![CDATA[

   ...
</Context>
]]></programlisting>
                </step>
			</procedure>
			<note>
                    <para>
                        At this point the installation can be tested:
                    <procedure>
                        <step>
                            <para>
                                Access &PRODUCT; by going to <ulink type="http" url="http://localhost:8888/opensso/UI/Login?realm=gatein">http://localhost:8888/opensso/UI/Login?realm=gatein</ulink> (assuming that the OpenSSO server using Tomcat is still running).
                            </para>
                        </step>
                        <step>
                            <para>
                                Login with the username <literal>root</literal> and the password <literal>gtn</literal> or any account created through the portal.
                            </para>
                        </step>
                    </procedure>
					</para>
            </note>
        </section>
        
        <section id="sect-Reference_Guide-OpenSSO_The_Open_Web_SSO_project-Setup_the_portal_to_redirect_to_OpenSSO">
            <title>Setup the portal to redirect to OpenSSO</title>
            <para>
                The next part of the process is to redirect all user authentication to the OpenSSO server.
            </para>
            <para>
                Information about where the OpenSSO server is hosted must be properly configured within the Enterprise Portal Platform instance. The required configuration is done by modifying three files:
			</para>
                <itemizedlist>
                    <listitem>
                        <para>
                        In the <filename>gatein.ear/web.war/groovy/groovy/webui/component/UIBannerPortlet.gtml</filename> file, modify the 'Sign In' link as follows:
<programlisting><![CDATA[
<!--
<a class="Login" onclick="$signInAction"><%=_ctx.appRes("UILoginForm.label.Signin")%></a>
-->
<a class="Login" href="/portal/sso"><%=_ctx.appRes("UILoginForm.label.Signin")%></a>
]]></programlisting>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                        In the <filename>gatein.ear/web.war/groovy/portal/webui/component/UILogoPortlet.gtmpl</filename> file modify the 'Sign In' link as follows:
<programlisting><![CDATA[
<!--
<a onclick="$signInAction"><%=_ctx.appRes("UILogoPortlet.action.signin")%></a>
-->
<a href="/portal/sso"><%=_ctx.appRes("UILogoPortlet.action.signin")%></a> 
]]></programlisting>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Replace the entire content of <filename>gatein.ear/portal.war/login/jsp/login.jsp</filename> with:
                        </para>
<programlisting role="HTML">&#60;html&#62;
  &#60;head&#62;
    &#60;script type=&#34;text/javascript&#34;&#62;
     window.location = &#39;/portal/sso&#39;;
    &#60;/script&#62;
  &#60;/head&#62;
  &#60;body&#62;
  &#60;/body&#62;
&#60;/html&#62;
</programlisting>
                    </listitem>
                    <listitem>
                        <para>
                            Add the following filters at the top of the filter chain in <filename>gatein.ear/portal.war/WEB-INF/web.xml</filename>.</para>
<programlisting role="XML"><![CDATA[<filter>
   <filter-name>LoginRedirectFilter</filter-name>
   <filter-class>org.gatein.sso.agent.filter.LoginRedirectFilter</filter-class>
   <init-param>
      <!-- This should point to your SSO authentication server -->
      <param-name>LOGIN_URL</param-name>
      <param-value>http://localhost:8888/opensso/UI/Login?realm=gatein&amp;goto=http://localhost:8080/portal/initiatessologin</param-value>
   </init-param>
</filter>
<filter>
   <filter-name>OpenSSOLogoutFilter</filter-name>
   <filter-class>org.gatein.sso.agent.filter.OpenSSOLogoutFilter</filter-class>
   <init-param>
      <!-- This should point to your SSO authentication server -->
      <param-name>LOGOUT_URL</param-name>
      <param-value>http://localhost:8888/opensso/UI/Logout</param-value>
   </init-param>
</filter>
<filter>
   <filter-name>InitiateLoginFilter</filter-name>
   <filter-class>org.gatein.sso.agent.filter.InitiateLoginFilter</filter-class>
   <init-param>
      <param-name>ssoServerUrl</param-name>
      <param-value>http://localhost:8888/opensso</param-value>
   </init-param>
   <init-param>
      <param-name>loginUrl</param-name>
      <param-value>http://localhost:8080/portal/dologin</param-value>
   </init-param>
   <init-param>
      <param-name>ssoCookieName</param-name>
      <param-value>iPlanetDirectoryPro</param-value>
   </init-param>
</filter>

<!-- Mapping the filters at the very top of the filter chain -->
<filter-mapping>
   <filter-name>LoginRedirectFilter</filter-name>
   <url-pattern>/*</url-pattern>
</filter-mapping>
<filter-mapping>
   <filter-name>OpenSSOLogoutFilter</filter-name>
   <url-pattern>/*</url-pattern>
</filter-mapping>
<filter-mapping>
   <filter-name>InitiateLoginFilter</filter-name>
   <url-pattern>/initiatessologin</url-pattern>
</filter-mapping>]]></programlisting>
                    </listitem>
                </itemizedlist>
            <para>
                From now on, all links redirecting to the user authentication pages will redirect to the OpenSSO centralized authentication form.
            </para>
        </section>
       <section id="sect-Reference_Guide-OpenSSO_The_Open_Web_SSO_project-Setup_cross_context_login">
          <title>Cross-domain authentication with OpenSSO</title>
          <para>The authentication scenario described in previous parts assumes that &PRODUCT; and OpenSSO are deployed on the same
             server or in same DNS domain (like OpenSSO on <emphasis role="bold">opensso.shareddomain.com</emphasis> and
             &PRODUCT; on <emphasis role="bold">portal.shareddomain.com</emphasis>).
          </para>
          <para>After successful authentication in OpenSSO console, OpenSSO will add special cookie <emphasis role="bold">iPlanetDirectoryPro</emphasis>
             for DNS domain shareddomain.com and then it redirects to portal agent. Portal OpenSSO agent can read SSO token
             from this cookie because cookie is in same DNS domain, so it can perform validation of token. In other words,
             exchange of secret token between OpenSSO and &PRODUCT; is done through this shared cookie.
          </para>
          <para>This approach cannot work in situations, when &PRODUCT; server and OpenSSO server are in different domains
             and cannot share cookie. For this scenario, OpenSSO provides special servlet <emphasis role="bold">CDCServlet</emphasis>.
             Authenticated user can send request to this servlet and servlet will send him encoded SAML message with SSO token and
             other information. Portal agent is then able to parse and validate this message, obtain SSO token and establish
             iPlanetDirectoryPro cookie for server where portal is deployed. Once OpenSSO agent on portal side has token,
             it can perform other validations of this token and successfully finish authentication of user.
          </para>
          <para>
             You can follow <ulink url="http://docs.oracle.com/cd/E19575-01/820-3746/gipjl/index.html">this link</ulink>
             for more technical information about CDCServlet or <ulink url="http://developers.sun.com/identity/reference/techart/troubleshooting3.html">this link</ulink>
             for more information about the whole OpenSSO Cross-Domain workflow with possible troubleshooting tips.
          </para>
          <section id="sect-Reference_Guide-OpenSSO_The_Open_Web_SSO_project-Setup_cross_context_login_configuration">
             <title>Cross-domain authentication configuration</title>
             <procedure>
                <step>
                   <para>
                      Assume that your OpenSSO server is deployed on opensso.mydomain.com and &PRODUCT; on portal.yourdomain.com.
                      If you are on single machine, you can simply simulate this scenario by using virtual hosts. On linux
                      you can simply edit the <filename>/etc/hosts</filename> file and add those records:</para>
<programlisting>opensso.mydomain.com 127.0.0.1
 portal.yourdomain.com 127.0.1.1
</programlisting>
                </step>
                <step>
                   <para>
                      Now you can follow steps in previous sections about &PRODUCT; and OpenSSO integration. Assumption
                      is that OpenSSO will be deployed on Tomcat server on <emphasis role="bold">opensso.mydomain.com:8888</emphasis>
                      and &PRODUCT; will be deployed on <emphasis role="bold">portal.yourdomain.com:8080</emphasis>. Configuration of
                      <emphasis role="bold">LoginRedirectFilter</emphasis> on &PRODUCT; side in the 
                      <emphasis role="bold">gatein.ear/portal.war/WEB-INF/web.xml</emphasis> file will be different. You will
                      use different class for filter and different parameters, because now you do not redirect user directly
                      to the OpenSSO console but you need to redirect him to CDCServlet. The configuration will look as follows:
                   </para>
                   <programlisting role="XML"><![CDATA[<filter>
  <filter-name>LoginRedirectFilter</filter-name>
  <filter-class>org.gatein.sso.agent.filter.OpenSSOCDLoginRedirectFilter</filter-class>
  <init-param>
    <!-- This should point to URL of CDCServlet on your OpenSSO authentication server -->
    <param-name>LOGIN_URL</param-name>
    <param-value>http://opensso.mydomain.com:8888/opensso/cdcservlet</param-value>
  </init-param>
  <init-param>
    <!-- This is name of GateIn authentication realm in your OpenSSO server -->
    <param-name>OpenSSORealm</param-name>
    <param-value>gatein</param-value>
  </init-param>
  <init-param>
    <!-- This is URL of agent on GateIn server side. Normally it should point to location,
         which is mapped to InitiateLoginFilter
    -->
    <param-name>AgentUrl</param-name>
    <param-value>http://portal.yourdomain.com:8080/portal/initiatessologin</param-value>
  </init-param>
</filter>
]]></programlisting>
                   <para>Configuration of <literal>OpenSSOLogoutFilter</literal> and <literal>InitiateLoginFilter</literal> will be quite similar like in previous scenario. The only difference is different host names:
                   </para>
<programlisting role="XML"><![CDATA[<filter>
  <filter-name>OpenSSOLogoutFilter</filter-name>
  <filter-class>org.gatein.sso.agent.filter.OpenSSOLogoutFilter</filter-class>
  <init-param>
    <!-- This should point to your OpenSSO authentication server -->
    <param-name>LOGOUT_URL</param-name>
    <param-value>http://opensso.mydomain.com:8888/opensso/UI/Logout</param-value>
  </init-param>
</filter>
<filter>
  <filter-name>InitiateLoginFilter</filter-name>
  <filter-class>org.gatein.sso.agent.filter.InitiateLoginFilter</filter-class>
  <init-param>
    <param-name>ssoServerUrl</param-name>
    <param-value>http://opensso.mydomain.com:8888/opensso</param-value>
  </init-param>
  <init-param>
    <param-name>loginUrl</param-name>
    <param-value>http://portal.yourdomain.com:8080/portal/dologin</param-value>
  </init-param>
  <init-param>
    <param-name>ssoCookieName</param-name>
    <param-value>iPlanetDirectoryPro</param-value>
  </init-param>
</filter>
]]></programlisting>
                </step>
                <step>
                   <para>
                      In case that you are on OpenAM instead of OpenSSO, it is mandatory to create agent for &PRODUCT; server.
                      This agent is required by CDCServlet to work properly. You can create agent in OpenAM UI by performing these steps:
                   </para>
                   <itemizedlist>
                      <listitem><para>Go to <ulink url="http://opensso.mydomain.com:8888/opensso">http://opensso.mydomain.com:8888/opensso</ulink>
                         and login as <emphasis>amadmin</emphasis>.</para>
                      </listitem>
                      <listitem>
                         <para>Go to <menuchoice><guimenu>Access Control</guimenu><guisubmenu>Realm "gatein"</guisubmenu><guisubmenu>Agents</guisubmenu><guimenuitem>Web</guimenuitem></menuchoice>.</para>
                      </listitem>
                      <listitem>
                         <para>Create new web agent through the wizard. You can use these properties:</para>
                         <itemizedlist>
                            <listitem><para>Name: GateInAgent</para></listitem>
                            <listitem><para>Password: Whatever you want.</para></listitem>
                            <listitem><para>Configuration: Centralized</para></listitem>
                            <listitem><para>Server URL: http://opensso.mydomain.com:8888/opensso</para></listitem>
                            <listitem><para>Agent URL: http://portal.yourdomain.com:8080</para></listitem>
                         </itemizedlist>
                         <para>If you have more portal servers on different hosts, you may want to create agent for each of them.
                            Please look at <ulink url="http://openam.forgerock.org/doc/admin-guide/index.html">OpenAM administration guide</ulink> for more details.
                         </para>
                      </listitem>
                   </itemizedlist>
                   <mediaobject>
                      <imageobject>
                         <imagedata fileref="images/AuthenticationAndIdentity/SSO/openam-agent.png" format="PNG" width="444" />
                      </imageobject>
                   </mediaobject>
                </step>
             </procedure>
             <note>
				<para>
                Support for Cross-Domain scenario has been tested with &PRODUCT; and with OpenSSO of version 8.0-Update1 and OpenAM of version 9.5.2 as SSO servers.
				</para>
             </note>
          </section>
       </section>
    </section>

    <section id="Single_Sign_On-SPNEGO">
        <title>SPNEGO</title>
        <para>SPNEGO (Simple and Protected GSSAPI Negotiation Mechanism) is
            used to authenticate transparently through the web browser after the
            user has been authenticated when logging-in his session.</para>
        <para>A typical use case is the following:</para>
        <procedure>
            <step>
                <para>User logs into his desktop (Such as a Windows machine).</para>
            </step>
            <step>
                <para>The desktop login is governed by Active Directory domain.</para>
            </step>
            <step>
                <para>User then uses his browser (IE/Firefox) to access a web
                    application (that uses JBoss Negotiation) hosted on JBoss EPP.</para>
            </step>
            <step>
                <para>The Browser transfers the desktop sign on information to the
                    web application.</para>
            </step>
            <step>
                <para>JBoss EAP/AS uses background GSS messages with the Active
                    Directory (or any Kerberos Server) to validate the Kerberos ticket from user.</para>
            </step>
            <step>
                <para>The User has seamless SSO into the web application.</para>
            </step>
        </procedure>
    
  <section id="SPNEGO_server_configuration">
    <title>SPNEGO Server Configuration</title>
    <para>
       In this section, there are some necessary steps for setting up the Kerberos server on Linux. This server will then be used for SPNEGO authentication against &PRODUCT;
    </para>
    <note>
      <para>If you do not have Linux but you are using the Windows and Active Directory domain, the information is not important for you and you may jump to the <xref linkend="Single_Sign_On-SPNEGO-GateIn_Configuration" /> to see how to integrate SPNEGO with &PRODUCT;.
         Please note that Kerberos setup is also dependent on your Linux distribution, so steps can be slightly different in your environment.
      </para>
    </note>
    <procedure>
        <step>
          <para>Correct the setup of network on the machine. For example, if you are using the "server.local.network" domain as your machine where Kerberos and &PRODUCT; are located,
          add the line containing the machine's IP address to the <emphasis role="bold">/etc/hosts</emphasis> file.
          </para>
          <programlisting>192.168.1.88  server.local.network</programlisting>
          <note>
          <para>It is not recommended to use loopback addresses.</para>
          </note>
        </step>
        <step>
          <para>Install Kerberos with these packages: <literal>krb5-admin-server</literal>, <literal>krb5-kdc</literal>, <literal>krb5-config</literal>, <literal>krb5-user</literal>, <literal>krb5-clients</literal>, and <literal>krb5-rsh-server</literal>.
          </para>
        </step>
        <step>
          <para>Edit the Kerberos configuration file at <filename>/etc/krb5.config</filename>, including:
          </para>
          <itemizedlist>
            <listitem>
              <para>Uncomment on these lines:</para>
<programlisting>default_tgs_enctypes = des3-hmac-sha1
default_tkt_enctypes = des3-hmac-sha1
permitted_enctypes = des3-hmac-sha1
</programlisting>
            </listitem>
            <listitem>
              <para>Add <emphasis role="bold">local.network</emphasis> as a default realm and it is also added to the list of realms and remove the remains of realms. The content looks like:
              </para>
<programlisting>
[libdefaults]
    default_realm = LOCAL.NETWORK
 
# The following krb5.conf variables are only for MIT Kerberos.
    krb4_config = /etc/krb.conf
    krb4_realms = /etc/krb.realms
    kdc_timesync = 1
    ccache_type = 4
    forwardable = true
    proxiable = true
 
# The following encryption type specification will be used by MIT Kerberos
# if uncommented.  In general, the defaults in the MIT Kerberos code are
# correct and overriding these specifications only serves to disable new
# encryption types as they are added, creating interoperability problems.
#
# Thie only time when you might need to uncomment these lines and change
# the enctypes is if you have local software that will break on ticket
# caches containing ticket encryption types it doesn't know about (such as
# old versions of Sun Java).
 
    default_tgs_enctypes = des3-hmac-sha1
    default_tkt_enctypes = des3-hmac-sha1
    permitted_enctypes = des3-hmac-sha1
 
# The following libdefaults parameters are only for Heimdal Kerberos.
    v4_instance_resolve = false
    v4_name_convert = {
        host = {
            rcmd = host
            ftp = ftp
        }
        plain = {
            something = something-else
        }
    }
    fcc-mit-ticketflags = true
 
[realms]
    LOCAL.NETWORK = {
        kdc = server.local.network
        admin_server = server.local.network
    }
 
[domain_realm]
    .local.network = LOCAL.NETWORK
    local.network = LOCAL.NETWORK
 
[login]
    krb4_convert = true
    krb4_get_tickets = false
</programlisting>
            </listitem>
          </itemizedlist>
        </step>
        <step>
          <para>Edit the KDC configuraton file at <filename>/etc/krb5kdc/kdc.conf</filename> that looks like.
          </para>
<programlisting>[kdcdefaults]
    kdc_ports = 750,88
 
[realms]
    LOCAL.NETWORK = {
        database_name = /home/gatein/krb5kdc/principal
        admin_keytab = FILE:/home/gatein/krb5kdc/kadm5.keytab
        acl_file = /home/gatein/krb5kdc/kadm5.acl
        key_stash_file = /home/gatein/krb5kdc/stash
        kdc_ports = 750,88
        max_life = 10h 0m 0s
        max_renewable_life = 7d 0h 0m 0s
        master_key_type = des3-hmac-sha1
        supported_enctypes = aes256-cts:normal arcfour-hmac:normal des3-hmac-sha1:normal des-cbc-crc:normal des:normal des:v4 des:norealm des:onlyrealm des:afs3
        default_principal_flags = +preauth
    }
 
[logging]
        kdc = FILE:/home/gatein/krb5logs/kdc.log
        admin_server = FILE:/home/gatein/krb5logs/kadmin.log</programlisting>
          <itemizedlist>
            <listitem>
              <para>Create <literal>krb5kdc</literal> and <literal>krb5logs</literal> directory for Kerberos database as shown in the configuration file above.</para></listitem>
            <listitem>
              <para>Next, create a KDC database using the <command>sudo krb5_newrealm</command> command.</para>
            </listitem>
            <listitem>
              <para>Start the KDC and Kerberos admin servers using these commands:</para>
				<itemizedlist>
					<listitem>
						<command>sudo /etc/init.d/krb5-kdc restart</command>
					</listitem>
					<listitem>
						<command>sudo /etc/init.d/krb-admin-server restart</command>
					</listitem>
				</itemizedlist>
            </listitem>
          </itemizedlist>
        </step>
        <step>
          <para>Add Principals and create Keys.</para>
          <itemizedlist>
            <listitem>
              <para>Start an interactive 'kadmin' session and create the necessary Principals using the <command>sudo kadmin.local</command> command.</para>
            </listitem>
            <listitem>
              <para>Add the &PRODUCT; machine and keytab file that need to be authenticated using the
<command>
addprinc -randkey HTTP/server.local.network@LOCAL.NETWORK
ktadd HTTP/server.local.network@LOCAL.NETWORK
</command> command.</para>
            </listitem>
            <listitem>
              <para>Add the default &PRODUCT; user accounts and enter the password for each created user that will be authenticated using the
<command>
addprinc john
addprinc demo
addprinc root
</command> command.</para>
            </listitem>
          </itemizedlist>
        </step>
        <step>
          <para>Test your changed setup by using the
<command>
kinit -A demo
</command> command.</para>
          <itemizedlist>
            <listitem>
              <para>If the setup works well, you are required to enter the password created for this user in Step 5.
                 Without <literal>-A</literal>, the kerberos ticket validation involved reverse DNS lookups, which can get very cumbersome to debug if your network's DNS setup is not great.
                 This is a production level security feature, which is not necessary in this development setup. In production environment, it will be better to avoid <literal>-A</literal> option.
              </para>
            </listitem>
            <listitem>
               <para>After successful login to Kerberos, you can see your Kerberos ticket when using the
<command>
klist
</command> command.</para>
            </listitem>
            <listitem>
              <para>If you want to logout and destroy your ticket, use the
<command>
kdestroy
</command> command. </para>
            </listitem>
          </itemizedlist>
      </step>
    </procedure>
  </section>
  <section id="Single_Sign_On-CAS_Central_Clients">
        <title>Clients</title>
          <para>After performing all configurations above, you need to enable the <emphasis role="bold">Negotiate authentication </emphasis> of Firefox in client machines so that clients could be authenticated by &PRODUCT; as follows:
          </para>
    <procedure>
          <step>
            <para>Start Firefox, then enter the <command>about:config </command> command into the address field.</para>
          </step>
          <step>
            <para>Enter <emphasis role="bold">network.negotiate-auth</emphasis> and set the value as below:</para>
<programlisting>
network.negotiate-auth.allow-proxies = true
network.negotiate-auth.delegation-uris = .local.network
network.negotiate-auth.gsslib (no-value)
network.negotiate-auth.trusted-uris = .local.network
network.negotiate-auth.using-native-gsslib = true
</programlisting>
          </step>
    </procedure>
     <note>
        <para>
          Consult the documentation of your OS or web browser if using different browser than Firefox.
        </para>
     </note>
  </section>
  <section id="Single_Sign_On-SPNEGO-GateIn_Configuration">
            <title>&PRODUCT; Configuration</title>
        <para>&PRODUCT; uses JBoss Negotiation to enable SPNEGO-based desktop
                SSO for the portal. Here are the steps to integrate SPNEGO with
                &PRODUCT;.
        </para>
            <procedure>
                <step>
                    <para>
                        Activate the Host authentication under the <filename>JBOSS_HOME/server/default/conf/login-config.xml</filename> file by adding the following host login module:
          </para>
<programlisting role="XML"><![CDATA[<!-- SPNEGO domain -->
<application-policy name="host">
  <authentication>
    <login-module code="com.sun.security.auth.module.Krb5LoginModule" flag="required">
      <module-option name="storeKey">true</module-option>
      <module-option name="useKeyTab">true</module-option>
      <module-option name="principal">HTTP/server.local.network@LOCAL.NETWORK</module-option>
      <module-option name="keyTab">/etc/krb5.keytab</module-option>
      <module-option name="doNotPrompt">true</module-option>
      <module-option name="debug">true</module-option>
    </login-module>
  </authentication>
 </application-policy>
]]></programlisting>

            <para>
               The <literal>keyTab</literal> value should point to the <filename>keytab</filename> file that was
               generated by the kadmin kerberos tool. When using Kerberos on Linux, it should be value of the <parameter>admin_keytab</parameter> parameter from the <filename>kdc.conf</filename> file.
               See <xref linkend="SPNEGO_server_configuration"/> for more details.
            </para>
                </step>
                
        <step>
                    <para>
                        Extend the core authentication mechanisms to support SPNEGO under
                        <filename>JBOSS_HOME/server/default/deployers/jbossweb.deployer/META-INF/war-deployers-jboss-beans.xml</filename> by
                        adding the 'SPNEGO' authenticators property.
          </para>

<programlisting role="XML"><![CDATA[<deployment xmlns="urn:jboss:bean-deployer:2.0">
<property name="authenticators">
  <map class="java.util.Properties" keyClass="java.lang.String" valueClass="java.lang.String">
     <entry>
        <key>BASIC</key>
        <value>org.apache.catalina.authenticator.BasicAuthenticator</value>
     </entry>
     <entry>
        <key>CLIENT-CERT</key>
        <value>org.apache.catalina.authenticator.SSLAuthenticator</value>
     </entry>
     <entry>
       <key>DIGEST</key>
       <value>org.apache.catalina.authenticator.DigestAuthenticator</value>
     </entry>
     <entry>
        <key>FORM</key>
        <value>org.apache.catalina.authenticator.FormAuthenticator</value>
     </entry>
     <entry>
        <key>NONE</key>
        <value>org.apache.catalina.authenticator.NonLoginAuthenticator</value>
     </entry>

     <!-- Add this entry -->
     <entry>
        <key>SPNEGO</key>
        <value>org.gatein.sso.spnego.GateInNegotiationAuthenticator</value>
     </entry>
  </map>
</property>
]]></programlisting>
                </step>
                <step>
                   <para>
                     Add the GateIn SSO module binaries by copying <emphasis role="bold">GATEIN_SSO_HOME/spnego/gatein.ear/lib/sso-agent-VERSION.jar</emphasis> to the <emphasis role="bold">JBOSS_HOME/server/default/deploy/gatein.ear/lib</emphasis> directory.
                     File <emphasis role="bold">GATEIN_SSO_HOME/spnego/gatein.ear/lib/spnego-VERSION.jar</emphasis> needs to be copied to the <emphasis role="bold">JBOSS_HOME/server/default/lib</emphasis> directory.
                   </para>
                </step>
                <step>
                   <para>
                      Download the <filename>jboss-negotiation-2.0.4.GA</filename> library from 
                      <ulink type="html" url="https://repository.jboss.org/nexus/content/groups/public/org/jboss/security/jboss-negotiation/2.0.4.GA/jboss-negotiation-2.0.4.GA.jar">https://repository.jboss.org/nexus/content/groups/public/org/jboss/security/jboss-negotiation/2.0.4.GA/jboss-negotiation-2.0.4.GA.jar</ulink>
                      and copy this file to <filename>JBOSS_HOME/server/default/lib</filename> directory as well.
                   </para>
                </step>
                <step>
                    <para>
                        Modify the <filename>JBOSS_HOME/server/defaut/deploy/gatein.ear/META-INF/gatein-jboss-beans.xml</filename> file as below:
                    </para>

<programlisting role="XML"><![CDATA[<deployment xmlns="urn:jboss:bean-deployer:2.0">
  <application-policy xmlns="urn:jboss:security-beans:1.0" name="gatein-form-auth-domain">
    <authentication>
      <login-module code="org.gatein.wci.security.WCILoginModule" flag="optional">
        <module-option name="portalContainerName">portal</module-option>
        <module-option name="realmName">gatein-domain</module-option>
      </login-module>
      <login-module code="org.exoplatform.services.security.jaas.SharedStateLoginModule" flag="required">
        <module-option name="portalContainerName">portal</module-option>
        <module-option name="realmName">gatein-domain</module-option>
      </login-module>

      <!-- Uncomment this part to check on each login if user is member of "/platform/users" group and if not
           create such membership -->
      <!--
      <login-module code="org.exoplatform.services.organization.idm.CustomMembershipLoginModule" flag="required">
        <module-option name="portalContainerName">portal</module-option>
        <module-option name="realmName">gatein-domain</module-option>
        <module-option name="membershipType">member</module-option>
        <module-option name="groupId">/platform/users</module-option>
      </login-module>
      -->

      <login-module code="org.exoplatform.services.security.j2ee.JbossLoginModule" flag="required">
        <module-option name="portalContainerName">portal</module-option>
<!-- logout needs to be performed from 'gatein-domain' as it is used for JaasSecurityManager. -->
        <module-option name="realmName">gatein-domain</module-option>
      </login-module>
    </authentication>
  </application-policy>


  <application-policy xmlns="urn:jboss:security-beans:1.0" name="gatein-domain">
    <authentication>
     <login-module
         code="org.gatein.sso.spnego.SPNEGOLoginModule"
         flag="requisite">
         <module-option name="password-stacking">useFirstPass</module-option>
         <module-option name="serverSecurityDomain">host</module-option>
	 <module-option name="removeRealmFromPrincipal">true</module-option>
	 <module-option name="usernamePasswordDomain">gatein-form-auth-domain</module-option>
      </login-module>
      <login-module
         code="org.gatein.sso.agent.login.SPNEGORolesModule"
         flag="required">
      <module-option name="password-stacking">useFirstPass</module-option>
      <module-option name="portalContainerName">portal</module-option>
      <module-option name="realmName">gatein-domain</module-option>
      </login-module>
   </authentication>
  </application-policy>

</deployment>
]]></programlisting>
                   <para>
                      This activates the SPNEGO LoginModules with fallback to the FORM authentication. When SPNEGO is not available and it needs to fallback to <literal>FORM</literal>, it will use the <literal>gatein-form-auth-domain</literal> security domain.
                   </para>
                </step>
                <step>
                    <para>
                        Modify <filename>JBOSS_HOME/server/default/deploy/gatein.ear/portal.war/WEB-INF/web.xml</filename> as below.</para>

<programlisting role="XML"><![CDATA[
<!--	<login-config>
	  <auth-method>FORM</auth-method>
	  <realm-name>gatein-domain</realm-name>
		<form-login-config>
		  <form-login-page>/initiatelogin</form-login-page>
			<form-error-page>/errorlogin</form-error-page>
	  </form-login-config>
	</login-config>
-->
    <login-config>
      <auth-method>SPNEGO</auth-method>
      <realm-name>SPNEGO</realm-name>
      <form-login-config>
	     <form-login-page>/initiatelogin</form-login-page>
	     <form-error-page>/errorlogin</form-error-page>
     </form-login-config>
    </login-config>
]]>
</programlisting>
          <para>
             This integrates the SPNEGO support into the Portal web archive by switching the authentication mechanism from the default "FORM"-based to "SPNEGO"-based authentication.
             You can notice that SPNEGO part also contains the <emphasis role="bold">form-login-config</emphasis> element, which is needed if you want to enable fallback to FORM based authentication.
             In this case, portal will try to authenticate user with his Kerberos ticket through SPNEGO. If the user does not have the Kerberos ticket, he will be redirected to FORM (&PRODUCT; login screen).
             So the first attempt is for login with SPNEGO and next attempt is for login with FORM, which is used only if login through SPNEGO is not successful (for example the user does not have
             the valid Kerberos ticket or his browser does not support SPNEGO with our Kerberos server).
          </para>
          <para>
             If you do not want fallback to FORM, you can disable the <literal>form-login-config</literal> part and have only:
		  </para>
<programlisting role="xml"><![CDATA[
    <login-config>
      <auth-method>SPNEGO</auth-method>
      <realm-name>SPNEGO</realm-name>
<!--      <form-login-config>
	     <form-login-page>/initiatelogin</form-login-page>
	     <form-error-page>/errorlogin</form-error-page>
     </form-login-config>
-->
    </login-config>
]]>
</programlisting>
		  <para>
          In this case, the user needs to authenticate through SPNEGO. If the authentication is failed, the <literal>FORM</literal> is not shown but user has authentication error with HTTP code 401.
          </para>
        </step>
        <step>
			<para>Integrate the request pre-processing needed for SPNEGO via filters by adding the following filters to 
			   <filename>JBOSS_HOME/server/default/deploy/gatein.ear/portal.war/WEB-INF/web.xml</filename> at the top of the Filter chain.
			</para>

<programlisting role="XML"><![CDATA[<filter>
  <filter-name>LoginRedirectFilter</filter-name>
  <filter-class>org.gatein.sso.agent.filter.LoginRedirectFilter</filter-class>
  <init-param>
    <!-- This should point to your SSO authentication server -->
    <param-name>LOGIN_URL</param-name>
    <param-value>/portal/private/classic</param-value>
  </init-param>
</filter>

<filter>
 <filter-name>SPNEGOFilter</filter-name>
 <filter-class>org.gatein.sso.agent.filter.SPNEGOFilter</filter-class>
</filter>

<filter-mapping>
  <filter-name>LoginRedirectFilter</filter-name>
  <url-pattern>/*</url-pattern>
</filter-mapping>

<filter-mapping>
  <filter-name>SPNEGOFilter</filter-name>
  <url-pattern>/login</url-pattern>
</filter-mapping>
]]></programlisting>
                   
        </step>
        <step>
          <para>
          Open the file:
			<itemizedlist>
				<listitem>
					<filename>JBOSS_HOME/server/default/deploy/gatein.ear/web.war/groovy/groovy/webui/component/UIBannerPortlet.gtml</filename>
				</listitem>
			</itemizedlist>
			</para>
			<para>Then, modify the 'Sign In' link as follows:</para>
<programlisting><![CDATA[
<!--
<a class="Login" onclick="$signInAction"><%=_ctx.appRes("UILoginForm.label.Signin")%></a>
-->
<a class="Login" href="/portal/sso"><%=_ctx.appRes("UILoginForm.label.Signin")%></a>
]]>
</programlisting>
          
        </step>
        <step>
                    <para>
                        Start the &PRODUCT; portal using the command:
					</para>
<programlisting>sudo ./run.sh -Djava.security.krb5.realm=LOCAL.NETWORK -Djava.security.krb5.kdc=server.local.network -c default -b server.local.network</programlisting>
        </step>
        <step>
                    <para>Log into Kerberos with the 
                        <command>kinit -A demo</command> command.</para>
					<para>You should be able to click the 'Sign In' link on the &PRODUCT; portal
                        and the 'demo' user from the &PRODUCT; portal should be automatically
                        logged in.
                    </para>
                </step>
                <step>
                   <para>
                      Try to destroy the kerberos ticket with the <command>kdestroy</command> command. Then try to login again. You will now be placed to login screen of &PRODUCT; because you do not have the active Kerberos ticket. You can log in with predefined account and password "demo"/"gtn" .
                   </para>
                </step>
            </procedure>
        </section>
    </section>

    <section id="sect-Reference_Guide-SSO_SAML">
       <title>SAML2</title>
       <para>
          SAML (Security Assertion Markup Language) is Oasis standard for exchanging authentication and authorization
          data between security domains. SAML 2.0 is an XML-based protocol that uses security tokens containing assertions
          to pass information about a principal (usually an end user) between an identity provider and a web service.
          SAML 2.0 enables web-based authentication and authorization scenarios including single sign-on (SSO).
       </para>
       <para>
          SAML2 standard is described in set of specifications, which provides exact format of XML messages and context how these messages
          are exchanged between Identity Provider  (IDP, Web application, which acts as SSO provider and users are
          authenticated against it) and Service Provider (SP, Web application, which is used by client who wants to authenticate).
          See <ulink type="http" url="http://docs.oasis-open.org/security/saml/v2.0/">http://docs.oasis-open.org/security/saml/v2.0/</ulink> for more information about specifications.
       </para>
       <para>
          The SAML2-based authentication is provided in &PRODUCT; SSO component. We support scenarios with &PRODUCT; acting
          as Service Provider (SP) or Identity Provider (IDP).
       </para>
       <section id="sect-Reference_Guide-SSO_SAML-Overview">
          <title>SAML2 Overview and authentication workflow</title>
          <para>For &PRODUCT; and SAML2 integration, we are using JBoss project <ulink type="http" url="https://docs.jboss.org/author/display/PLINK/SAML+v2.0">Picketlink Federation</ulink>,
             which provides solution for most important parts of SAML2 specification. Especially it supports SSO authentication
             with SAML2 HTTP Redirect Binding and SAML2 HTTP Post Binding and it supports SAML2 Global Logout feature.
          </para>
          <para>SSO authentication is based on circle of trust between SP and IDP.</para>
          <mediaobject>
             <imageobject>
                <imagedata fileref="images/AuthenticationAndIdentity/SSO/saml-sso.png" format="PNG" align="center" valign="middle" scalefit="1" />
             </imageobject>
          </mediaobject>
          <para>The authentication works as follows (flow with &PRODUCT; as SAML2 SP):</para>
          <procedure>
            <step>User sends request to secured resource like <ulink type="http" url="http://localhost:8080/portal/dologin">http://localhost:8080/portal/dologin</ulink>
            </step>
            <step>&PRODUCT; will check if user is already authenticated and if yes, grant access to resource.
               Otherwise continue with flow below.
            </step>
            <step>
               There is special Tomcat valve, which needs to be configured for portal context. This Valve will create SAML Request, which is basically XML message. Example of message:
<programlisting>
<![CDATA[
<samlp:AuthnRequest AssertionConsumerServiceURL="http://localhost:8080/portal/dologin" ID="ID_101dcb5e-f432-4f45-87cb-47daff92edef" IssueInstant="2012-04-12T17:53:27.294+01:00" ProtocolBinding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" Version="2.0">
   <saml:Issuer>http://localhost:8080/portal/dologin</saml:Issuer>
   <samlp:NameIDPolicy AllowCreate="true" Format="urn:oasis:names:tc:SAML:2.0:nameid-format:transient"/>
</samlp:AuthnRequest>
]]>
</programlisting>
               Valve will encapsulate SAML request into HttpResponse and it redirects it to IDP. Picketlink Federation
               supports SAML Redirect Binding, which basically means that SAML XML Request message is Base64 encoded and
               URL encoded and it is appended as URL parameter to GET request, which will be send to IDP.
               PL Fed also supports SAML POST Binding where is message encoded into Base64 and sent in the body of POST request.
            </step>
            <step>
               IDP parses XML with SAML request and it sends login screen back to client. Now client (user) needs to
               authenticate himself. SAML specification does not mandate how exactly should be authentication of client
               on IDP side performed.
            </step>
            <step>
               User fills his credentials into IDP FORM and submits request for JAAS authentication. &PRODUCT; SSO component
               provides login module <filename>SAML2IdpLoginModule</filename>, which will authenticate user by sending
               callback request via REST API back to &PRODUCT;. This is similar approach like authentication with other
               SSO providers like CAS, which are also leveraging this REST service.
               <note>
				<para>
                  Portal administrators are free to use their own login module stack instead of our REST callback based login module.
                  However they need to make sure that authenticated users also need to exist in &PRODUCT; database.
                  Otherwise their users may have authorization errors with 403 response when they try to access portal.
				</para>
               </note>
            </step>
            <step>
               So after successful authentication, IDP will create SAML assertion ticket and it creates SAML Response message with this ticket. Message can looks like this:
<programlisting role="XML"><![CDATA[
<samlp:Response ID="ID_5291c49e-5450-4b3b-9f99-f76606db9929" Version="2.0" IssueInstant="2012-04-12T17:53:59.237+01:00" Destination="http://localhost:8080/portal/dologin" InResponseTo="ID_101dcb5e-f432-4f45-87cb-47daff92edef">
   <saml:Issuer>http://localhost:8080/idp/</saml:Issuer>
   <samlp:Status>
      <samlp:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/>
   </samlp:Status>

   <saml:Assertion ID="ID_ebe89398-1e27-4257-9413-c3c17c40c9df" Version="2.0" IssueInstant="2012-04-12T17:53:59.236+01:00">
      <saml:Issuer Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">root</saml:Issuer>
      <saml:Subject>
         <saml:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">root</saml:NameID>
         <saml:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer">
            <saml:SubjectConfirmationData InResponseTo="ID_101dcb5e-f432-4f45-87cb-47daff92edef" NotBefore="2012-04-12T17:53:59.236+01:00" NotOnOrAfter="2012-04-12T17:54:06.236+01:00" Recipient="http://localhost:8080/portal/dologin"/>
         </saml:SubjectConfirmation>
      </saml:Subject>
      <saml:Conditions NotBefore="2012-04-12T17:53:57.236+01:00" NotOnOrAfter="2012-04-12T17:54:06.236+01:00"/>
      <saml:AuthnStatement AuthnInstant="2012-04-12T17:53:59.237+01:00">
         <saml:AuthnContext>
            <saml:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml:AuthnContextClassRef>
         </saml:AuthnContext>
      </saml:AuthnStatement>
      <saml:AttributeStatement>
         <saml:Attribute Name="Role">
            <saml:AttributeValue xsi:type="xs:string">users</saml:AttributeValue>
         </saml:Attribute>
         <saml:Attribute Name="Role">
            <saml:AttributeValue xsi:type="xs:string">administrators</saml:AttributeValue>
         </saml:Attribute>
      </saml:AttributeStatement>
   </saml:Assertion>
</samlp:Response>
]]>
</programlisting>
            </step>
            <step>
               Message is then encapsulated into HttpResponse and redirected back to SP (&PRODUCT;).
            </step>
            <step>
               On &PRODUCT; side is SAML response message decoded again by the Tomcat Valve and if assertion from response
               is valid, then username and his roles are added into ThreadLocal context variable. Valve then triggers JAAS
               authentication. &PRODUCT; SSO component will provide login module <filename>SAML2IntegrationLoginModule</filename>,
               which will parse authenticated username and it will perform &PRODUCT; specific operations, like creating Identity object
               and registering it into IdentityRegistry. Now user is successfully authenticated.
            </step>
            <step>
               User is redirected back to the secure resource
               <ulink type="http" url="http://localhost:8080/portal/dologin">http://localhost:8080/portal/dologin</ulink>, which in next turn will redirect him to &PRODUCT; as authenticated user.
            </step>
          </procedure>
          <para>
             If the user wants to authenticate against different SP application within same browser session (&PRODUCT; on different host
             or completely different web application), then he does not need to provide credentials again on IDP side
             because he has been already authenticated against IDP. So he has automatic authentication thanks to SSO.
          </para>
          <para>
             In next sections, we will go through various scenarios, which describes how you can leverage SAML2 in &PRODUCT;
             and there is description of all needed configuration changes.
          </para>
       </section>

       <section id="sect-Reference_Guide-SSO_SAML-SingleHostScenario">
          <title>Single host scenario</title>
          <para>This scenario is good starting point for other usecases. &PRODUCT; will act as SAML2 SP.
             We will have &PRODUCT; and SAML2 IDP on same host
             and we will use JBoss 5 as target server. So assumption is that you have &PRODUCT; bundle for JBoss 5.
             Directory with &PRODUCT; will be referred to as <emphasis role="bold">JBOSS_HOME</emphasis>. Directory with unpacked SSO packaging zip will be referred to as
             <emphasis role="bold">GATEIN_SSO_HOME</emphasis> similarly like in previous sections.
          </para>
          <procedure>
             <step>
				<para>Download the <emphasis role="bold">idp-sig</emphasis> application.
                It is a sample quickstart application for Picketlink Federation and it is preconfigured to act as SAML2 IDP,
                which uses signed SAML messages. It can be downloaded from <ulink type="html" url="https://repository.jboss.org/nexus/index.html#nexus-search;quick~picketlink-quickstarts">https://repository.jboss.org/nexus/index.html#nexus-search;quick~picketlink-quickstarts</ulink>.
                You will need version for JBoss AS5.
				</para>
             </step>
             <step>
				<para>
                Deploy downloaded <filename>idp-sig-VERSION.war</filename> into directory <filename>JBOSS_HOME/server/default/deploy/</filename>.
				</para>
			 </step>
             <step>
				<para>	
                Copy all JAR files from <filename>GATEIN_SSO_HOME/saml/gatein.ear/lib/*</filename> into <filename>JBOSS_HOME/server/default/deploy/gatein.ear/lib/</filename>.
				</para>
			</step>
             <step>
				<para>
                Copy the main configuration file for Picketlink Federation from <filename>GATEIN_SSO_HOME/saml/gatein.ear/portal.war/WEB-INF/picketlink.xml</filename>
                to <filename>JBOSS_HOME/server/default/deploy/gatein.ear/portal.war/WEB-INF/</filename>.
				</para>
			</step>
             <step>
				<para>
                Copy example keystore file for picketlink federation from <filename>GATEIN_SSO_HOME/saml/gatein.ear/portal.war/WEB-INF/classes/jbid_test_keystore.jks</filename>
                to <filename>JBOSS_HOME/server/default/deploy/gatein.ear/portal.war/WEB-INF/classes/</filename>.
                This is example keystore file, which uses same keys on both &PRODUCT; and IDP side. Since it's prebundled
                keystore, it should not be used for production environment (See <xref linkend="sect-Reference_Guide-SSO_SAML-KeystoreUpdate" /> for more details).
				</para>
             </step>
             <step>
				<para>
                Copy <filename>gatein-jboss-beans</filename> from <filename>GATEIN_SSO_HOME/saml/gatein.ear/META-INF/gatein-jboss-beans.xml</filename>
                to <filename>JBOSS_HOME/server/default/deploy/gatein.ear/META-INF/gatein-jboss-beans.xml</filename>.
                This will replace original file with new configuration, which contains the JAAS login modules needed for the SAML integration.
                There are 2 login modules by default: <literal>SAML2IntegrationLoginModule</literal> and <literal>JbossLoginModule</literal>.
				</para>
             </step>
             <step>
				<para>
                Add and configure new Valve in <filename>JBOSS_HOME/server/default/deploy/gatein.ear/portal.war/WEB-INF/context.xml</filename>.
                Configuration of new valve should be like this:
				</para>
<programlisting><![CDATA[
<Valve className="org.picketlink.identity.federation.bindings.tomcat.sp.ServiceProviderAuthenticator" />
]]></programlisting>
             </step>
             <step>
				<para>
                Add new filter and filter-mapping for this filter into <filename>JBOSS_HOME/server/default/deploy/gatein.ear/portal.war/WEB-INF/web.xml</filename>.
				</para>
                <para>The filter configuration should look like this:</para>
<programlisting role="XML"><![CDATA[<filter>
   <filter-name>SAML2LogoutFilter</filter-name>
   <filter-class>org.gatein.sso.agent.filter.SAML2LogoutFilter</filter-class>
</filter>
]]></programlisting>
                <para>And filter-mapping for this filter as first filter in filter-mapping section:</para>
<programlisting role="XML"><![CDATA[<filter-mapping>
   <filter-name>SAML2LogoutFilter</filter-name>
   <url-pattern>/*</url-pattern>
</filter-mapping>
]]></programlisting>
                <note>
				 <para>
                   Filter is needed for "Single Logout" (Global logout) feature of SAML2 specification. Actually it means that when you are logged in more SP
                   applications, you will be logged out automatically from all of them by initiating global logout. You can skip this filter if you do not want the global logout and
                   you want to be logged out only from &PRODUCT; when pressing <emphasis>Sign out</emphasis>.
				 </para>
                </note>
             </step>
             <step>
				<para>
                In the <filename>JBOSS_HOME/server/default/conf/login-config.xml</filename> file, you need to add one new application-policy.
                It is needed by IDP authentication, so that IDP will not use UsersPasswordLoginModule, but it will use login module for REST callback to &PRODUCT;.
                It means that you will be able to login in SAML IDP screen with same username and passwords as to &PRODUCT; (root/gtn, john/gtn, and more).
                </para>
				<para>
				The new policy needs to look like this:
				</para>
<programlisting role="XML"><![CDATA[
<application-policy xmlns="urn:jboss:security-beans:1.0" name="idp">
   <authentication>
      <login-module code="org.gatein.sso.saml.plugin.SAML2IdpLoginModule" flag="required">
         <module-option name="rolesProcessing">STATIC</module-option>
         <module-option name="staticRolesList">manager,employee,sales</module-option>
         <module-option name="gateInURL">${portal.callback.url:http://localhost:8080/portal}</module-option>
      </login-module>
   </authentication>
</application-policy>
]]></programlisting>
             </step>
             <step>
				<para>
                Copy <filename>GATEIN_SSO_HOME/saml/idp-lib/sso-saml-plugin-VERSION.jar</filename> into <filename>JBOSS_HOME/server/default/lib/</filename>. This JAR file is needed by IDP for supporting REST callbacks described in the previous step.
				</para>
             </step>
             <step>
				<para>
                In <filename>JBOSS_HOME/server/default/deploy/gatein.ear/web.war/groovy/groovy/webui/component/UIBannerPortlet.gtml</filename>, modify the 'Sign In' link as follows:
				</para>
<programlisting>
<![CDATA[
<!--
<a class="Login" onclick="$signInAction"><%=_ctx.appRes("UILoginForm.label.Signin")%></a>
-->
<a class="Login" href="/portal/dologin"><%=_ctx.appRes("UILoginForm.label.Signin")%></a>
]]>
</programlisting>
             </step>
             <step>
				<para>
                Test it. You can restart server and go to <ulink type="html" url="http://localhost:8080/portal">http://localhost:8080/portal</ulink> and click to "Sign in".
                You will be redirected to IDP console where you can fill standard &PRODUCT; username/password for authentication (like john/gtn for instance).
                After correct login, you will be redirected to &PRODUCT; as logged user.
				</para>
             </step>
          </procedure>
       </section>

       <section id="sect-Reference_Guide-SSO_SAML-KeystoreUpdate">
          <title>Using your own keystores</title>
          <para>In this procedure, you will generate and use your own Keystores. This will add more safety into trusted
             communication between &PRODUCT; and IDP because default packaging is using prepackaged keystore "jbid_test_keystore.jks".
             For secure and trusted communication, you will need your own keystores with your own keys. Default keystore is
             useful only for testing purpose, but should not be used in production. Separate keys for &PRODUCT;
             and for IDP are used in this scenario.
          </para>
          <note>
			<para>Scenario below can be simplified by using single keystore file for both &PRODUCT; and IDP.
             It depends on your needs if you use same keystore for both or separate keystores for each.
			</para>
          </note>
          <procedure>
             <step>
				<para>
                Create new keystore for IDP and generate new pair of public/private keys. In the 
                <filename>JBOSS_HOME/server/default/deploy/idp-sig.war/WEB-INF/classes</filename> directory (assumption is exploded WAR archive idp-sig.war), you can do it with the 
                <command>keytool -genkey -alias idp-key -keyalg RSA -keystore idp-keystore.jks</command> command. You need to choose keystore password and private key password. Let's assume that your keystore password
                is "keystorepass" and a private key password is "keypass".
				</para>
             </step>
             <step>
				<para>
                Export IDP cerificate and public key into the <filename>idp.crt</filename> file using the 
                <command>keytool -export -alias idp-key -file idp.crt -keystore idp-keystore.jks</command> command.
				</para>
             </step>
             <step>
				<para>
                Create a new keystore for &PRODUCT; (SP) and generate new pair of public/private keys. In the 
                <filename>JBOSS_HOME/server/default/deploy/gatein.ear/portal.war/WEB-INF/classes</filename> directory, you can use the
                <command>keytool -genkey -alias sp-key -keyalg RSA -keystore sp-keystore.jks</command> command. You need to choose keystore password and private key password. Let's assume that your keystore password is
                "spkeystorepass" and a private key password is "spkeypass".
				</para>
             </step>
             <step>
				<para>
                Export &PRODUCT; cerificate and public key into the <filename>sp.crt</filename> file using the 
                <command>keytool -export -alias sp-key -file sp.crt -keystore sp-keystore.jks</command> command.
				</para>
             </step>
             <step>
				<para>
                Import IDP certificate and public key to SP keystore. This will ensure that SP will trust public key from IDP.
                You can use commands:</para>
<programlisting><![CDATA[
mv $JBOSS_HOME/server/default/deploy/idp-sig.war/WEB-INF/classes/idp.crt $JBOSS_HOME/server/default/deploy/gatein.ear/portal.war/WEB-INF/classes/idp.crt
keytool -printcert -v -file idp.crt # Command only for debugging purposes. You can check certificate with it.
keytool -import -trustcacerts -alias idp-cert -file idp.crt -keystore sp-keystore.jks
rm idp.crt
]]></programlisting>
             </step>
             <step>
				<para>
                Import &PRODUCT; certificate and public key to IDP keystore. This will ensure that IDP will trust public
                key from SP. In the <filename>JBOSS_HOME/server/default/deploy/idp-sig.war/WEB-INF/classes/</filename> directory,
                you can use commands:
				</para>
<programlisting><![CDATA[
mv $JBOSS_HOME/server/default/deploy/gatein.ear/portal.war/WEB-INF/classes/sp.crt $JBOSS_HOME/server/default/deploy/idp-sig.war/WEB-INF/classes/sp.crt
keytool -printcert -v -file sp.crt # Command only for debugging purposes. You can check certificate with it.
keytool -import -trustcacerts -alias sp-cert -file sp.crt -keystore idp-keystore.jks
rm sp.crt
]]></programlisting>
             </step>
             <step>
				<para>
                Configuration of KeyProvider in the <filename>JBOSS_HOME/server/default/deploy/idp-sig.war/WEB-INF/picketlink.xml</filename> file may look like this:
				</para>
<programlisting><![CDATA[
<KeyProvider ClassName="org.picketlink.identity.federation.core.impl.KeyStoreKeyManager">
   <Auth Key="KeyStoreURL" Value="/idp-keystore.jks" />
   <Auth Key="KeyStorePass" Value="keystorepass" />
   <Auth Key="SigningKeyPass" Value="keypass" />
   <Auth Key="SigningKeyAlias" Value="idp-key" />
   <ValidatingAlias Key="${portal.sp.host::localhost}" Value="sp-cert"/>
</KeyProvider>
]]></programlisting>
             </step>
             <step>
				<para>
                Configuration of KeyProvider in the <filename>JBOSS_HOME/server/default/deploy/gatein.ear/portal.war/WEB-INF/picketlink.xml</filename> file may look like this:
				</para>
<programlisting><![CDATA[
<KeyProvider ClassName="org.picketlink.identity.federation.core.impl.KeyStoreKeyManager">
   <Auth Key="KeyStoreURL" Value="/sp-keystore.jks" />
   <Auth Key="KeyStorePass" Value="spkeystorepass" />
   <Auth Key="SigningKeyPass" Value="spkeypass" />
   <Auth Key="SigningKeyAlias" Value="sp-key" />
   <ValidatingAlias Key="${idp.host::localhost}" Value="idp-cert"/>
</KeyProvider>
]]></programlisting>
             </step>
          </procedure>
          <note>
			<para>It may be slightly better to use certificates signed by certification authority. But for our purpose, it is fine
             to use self-signed certificates. For more information, you can check additional sources like
             <ulink type="html" url="http://docs.oracle.com/javase/tutorial/security/sigcert/index.html">http://docs.oracle.com/javase/tutorial/security/sigcert/index.html</ulink>.
			</para>
		   </note>
       </section>

       <section id="sect-Reference_Guide-SSO_SAML-MultipleHostsScenario">
          <title>Multiple hosts scenario</title>
          <para>
             In this section, we will show the scenario closed to production environment. We will have 2 hosts with &PRODUCT;,
             first on host <filename>www.node1.com</filename> and second on <filename>www.node2.com</filename>. Both will
             use same Identity provider from host <filename>www.node3.com</filename>. So 3 hosts in total.
          </para>
          <procedure>
             <step>
				<para>
                You will need to add virtual hosts to the <filename>/etc/hosts</filename> file if you want to test this scenario on single
                physical machine. On Linux, it can be done by adding those entries:
				</para>
<programlisting><![CDATA[
127.0.1.1 www.node1.com
127.0.1.2 www.node2.com
127.0.1.3 www.node3.com
]]></programlisting>
             </step>
             <step>
				<para>
                Copy <filename>JBOSS_HOME/server/default</filename> into more separate configurations:
				</para>
<programlisting><![CDATA[
cd $JBOSS_HOME/server
cp -r default node1
cp -r default node2
cp -r default node3
]]></programlisting>
             </step>
             <step>
				<para>
                In the <filename>JBOSS_HOME/server/node3/deploy/idp-sig.war/WEB-INF/picketlink.xml</filename> file, you will
                need to change trusted domains list to ensure that IDP will trust your domains.
				</para>
<programlisting><![CDATA[
<Trust>
   <Domains>node1.com,node2.com,node3.com</Domains>
</Trust>
]]></programlisting>
				<para>
                IDP will also serves requests from both <filename>www.node1.com</filename> and <filename>www.node2.com</filename>.
                So in KeyProvider configuration, you need to have two "ValidatingAlias" instead of default one. They should look like:	
				</para>
<programlisting><![CDATA[
<ValidatingAlias Key="www.node1.com" Value="sp-cert"/>
<ValidatingAlias Key="www.node2.com" Value="sp-cert"/>
]]>
</programlisting>
             </step>
             <step>
				<para>
                Start node1 with command:
				</para>
<programlisting><![CDATA[
./run.sh -c node1 -b www.node1.com
-Didp-sig.url=http://www.node3.com:8080/idp-sig/
-Didp.url=http://www.node3.com:8080/idp-sig/
-Dportal.sp.url=http://www.node1.com:8080/portal/dologin
-Didp.host=www.node3.com
 -Dportal.sp.host=www.node1.com
]]></programlisting>
				<para>
                This will start the portal and set all the system properties, which are replaced in the <filename>picketlink.xml</filename> and <filename>login-config.xml</filename> files.
				</para>
             </step>
             <step>
				<para>
                Start node3 (IDP host) with command:
				</para>
<programlisting>
<![CDATA[
./run.sh -c node3 -b www.node3.com
-Didp-sig.url=http://www.node3.com:8080/idp-sig/
-Dportal.callback.url=http://www.node1.com:8080/portal
]]>
</programlisting>
             </step>
             <step>
				<para>
                After start the server, you can test that you can access <ulink type="html" url="http://www.node1.com:8080/portal">http://www.node1.com:8080/portal</ulink>
                and when trying to login, you will be redirected to IDP on
                <ulink type="html" url="http://www.node3.com:8080/idp-sig">http://www.node3.com:8080/idp-sig</ulink>
                where you can login with credentials like john/gtn.
				</para>
             </step>
             <step>
				<para>
                Start the second host node2. We will use "www.node3.com"  again as IDP so startup commands can look like:
				</para>
<programlisting><![CDATA[
./run.sh -c node2 -b www.node2.com
-Didp-sig.url=http://www.node3.com:8080/idp-sig/
-Didp.url=http://www.node3.com:8080/idp-sig/
-Dportal.sp.url=http://www.node2.com:8080/portal/dologin
-Didp.host=www.node3.com -Dportal.sp.host=www.node2.com
]]></programlisting>
             </step>
             <step>
				<para>
                Now you can go to <ulink type="html" url="http://www.node2.com:8080/portal">http://www.node2.com:8080/portal</ulink>. After clicking "Sign in", you will be logged automatically thanks to SSO. When clicking "Sign out", you will then be automatically logged out
                from both &PRODUCT; hosts and also IDP host thanks to SAML2 Global logout. If you do not want global logout,
                you can skip it by commenting <emphasis>SAML2LogoutFilter</emphasis> in <filename>web.xml</filename>. See the <link linkend="sect-Reference_Guide-SSO_SAML-SingleHostScenario">first scenario</link> for more information about this filter.
				</para>
             </step>
          </procedure>
       </section>

       <section id="sect-Reference_Guide-SSO_SAML-PortalAsIDP">
          <title>&PRODUCT; as Identity Provider</title>
          <para>
             In next scenario, we will use first &PRODUCT; host as SAML Identity Provider (IDP) and second host as SAML
             Service Provider (SP).
          </para>
          <procedure>
             <step>
				<para>Copy the <literal>portal-idp</literal> configuration which will be used for &PRODUCT; as IDP using the 
                <command>cp -r node1 portal-idp</command> command.
				</para>
             </step>
             <step>
				<para>
                In the <filename>JBOSS_HOME/server/portal-idp/deploy/gatein.ear/portal.war/WEB-INF/web.xml</filename> file, you
                need to add one special listener to cleaning expired SAML tokens:
				</para>
<programlisting role="XML"><![CDATA[<listener>
   <listener-class>org.picketlink.identity.federation.web.listeners.IDPHttpSessionListener</listener-class>
</listener>
]]>
</programlisting>
                <note>
				 <para>
                   The <literal>SAML2LogoutFilter</literal> filter should be commented in this file as it is used only for
                   SP scenario.
				 </para>
                </note>
             </step>
             <step>
				<para>
                In <filename>JBOSS_HOME/server/portal-idp/deploy/gatein.ear/portal.war/WEB-INF/context.xml</filename>, you 
                need to add the <literal>org.gatein.sso.saml.plugin.valve.PortalIDPWebBrowserSSOValve</literal> valve:
				</para>
<programlisting role="XML"><![CDATA[<Valve className="org.gatein.sso.saml.plugin.valve.PortalIDPWebBrowserSSOValve" />
]]></programlisting>
                <note>
				 <para>The previous valve (<literal>ServiceProviderAuthenticator</literal>) should be commented as it is used
                   only for SP scenario.
				 </para>
                </note>
             </step>
             <step>
				<para>
                The <filename>JBOSS_HOME/server/portal-idp/deploy/gatein.ear/portal.war/WEB-INF/picketlink.xml</filename> file 
                needs to be configured as Identity provider. It can look like this:
				</para>
<programlisting role="XML"><![CDATA[<PicketLink xmlns="urn:picketlink:identity-federation:config:2.1">
   <PicketLinkIDP xmlns="urn:picketlink:identity-federation:config:1.0" SupportsSignatures="true">
      <IdentityURL>${idp-sig.url::http://localhost:8080/portal/dologin}</IdentityURL>
      <Trust>
         <Domains>localhost,node1.com,node2.com</Domains>
      </Trust>

      <KeyProvider ClassName="org.picketlink.identity.federation.core.impl.KeyStoreKeyManager">
         <Auth Key="KeyStoreURL" Value="/idp-keystore.jks" />
         <Auth Key="KeyStorePass" Value="keystorepass" />
         <Auth Key="SigningKeyPass" Value="keypass" />
         <Auth Key="SigningKeyAlias" Value="idp-key" />
         <ValidatingAlias Key="localhost" Value="sp-cert"/>
         <ValidatingAlias Key="127.0.0.1" Value="sp-cert"/>
         <ValidatingAlias Key="www.node2.com" Value="sp-cert"/>
      </KeyProvider>
   </PicketLinkIDP>

   <Handlers xmlns="urn:picketlink:identity-federation:handler:config:2.1">
      <Handler
         class="org.picketlink.identity.federation.web.handlers.saml2.SAML2IssuerTrustHandler" />
      <Handler
         class="org.picketlink.identity.federation.web.handlers.saml2.SAML2LogOutHandler" />
      <Handler
         class="org.picketlink.identity.federation.web.handlers.saml2.SAML2AuthenticationHandler" />
      <Handler
         class="org.picketlink.identity.federation.web.handlers.saml2.RolesGenerationHandler" />
      <Handler
         class="org.picketlink.identity.federation.web.handlers.saml2.SAML2SignatureGenerationHandler" />
      <Handler
         class="org.picketlink.identity.federation.web.handlers.saml2.SAML2SignatureValidationHandler" />
   </Handlers>
</PicketLink>
]]></programlisting>
             </step>
             <step>
				<para>The <filename>JBOSS_HOME/server/portal-idp/deploy/gatein.ear/META-INF/gatein-jboss-beans.xml</filename> file needs
                to have all login modules configured as normally, because we will use &PRODUCT; as SAML IDP now.
				</para>
<programlisting role="XML"><![CDATA[<application-policy xmlns="urn:jboss:security-beans:1.0" name="gatein-domain">
  <authentication>
    <login-module code="org.gatein.wci.security.WCILoginModule" flag="optional">
      <module-option name="portalContainerName">portal</module-option>
      <module-option name="realmName">gatein-domain</module-option>
    </login-module>
    <login-module code="org.exoplatform.web.security.PortalLoginModule" flag="required">
      <module-option name="portalContainerName">portal</module-option>
      <module-option name="realmName">gatein-domain</module-option>
    </login-module>
    <login-module code="org.exoplatform.services.security.jaas.SharedStateLoginModule" flag="required">
      <module-option name="portalContainerName">portal</module-option>
      <module-option name="realmName">gatein-domain</module-option>
    </login-module>

    <login-module code="org.exoplatform.services.security.j2ee.JbossLoginModule" flag="required">
      <module-option name="portalContainerName">portal</module-option>
      <module-option name="realmName">gatein-domain</module-option>
    </login-module>

    </authentication>
</application-policy>
]]></programlisting>
             </step>
             <step>
				<para>
                You need to copy the <literal>idp-keystore.jks</literal> keystore created in previous tutorials into
                <filename>JBOSS_HOME/server/portal-idp/deploy/gatein.ear/portal.war/WEB-INF/classes/</filename>.
				</para>
             </step>
             <step>
				<para>
                Start &PRODUCT; as IDP with:
                <command>./run.sh -c portal-idp -b www.node1.com -Didp-sig.url=http://www.node1.com:8080/portal/dologin</command>
                Note that we use configuration <literal>portal-idp</literal> but we will bind it to <emphasis>www.node1.com</emphasis>.
				</para>
             </step>
             <step>
				<para>Start second node, which will act as SP.
				</para>
<programlisting><![CDATA[
./run.sh -c node2 -b www.node2.com
-Didp.url=http://www.node1.com:8080/portal/dologin
-Dportal.sp.url=http://www.node2.com:8080/portal/dologin
-Didp.host=www.node1.com -Dportal.sp.host=www.node2.com
]]>
</programlisting>
             </step>
             <step>
                <para>
                   You can test by going to <ulink type="http" url="http://www.node2.com:8080/portal">http://www.node2.com:8080/portal</ulink>
                   and when clicking "Sign in", you will be redirected to login screen on node1. After successful login,
                   you will be redirected back to node2.
                </para>
                <para>
                   You can also try other SP applications (like picketlink quickstarts examples from <ulink type="html" url="https://repository.jboss.org/nexus/index.html#nexus-search;quick~picketlink-quickstarts">https://repository.jboss.org/nexus/index.html#nexus-search;quick~picketlink-quickstarts</ulink>)
                   and configure them for login against &PRODUCT; IDP, so you will be able to login into example application
                   on behalf of &PRODUCT; SAML2 IDP.
                </para>
             </step>
          </procedure>
       </section>
    </section>
</section>