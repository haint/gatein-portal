<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../../Reference_Guide.ent">
%BOOK_ENTITIES;
]>
<section id="sect-Reference_Guide-RTL_Right_To_Left_Framework">
	<title>RTL (Right To Left) Framework</title>
	<para>
		The text orientation depends on the current locale setting. The orientation is a Java 5 enum that provides a set of functionalities:
	</para>
	
<programlisting role="JAVA">
LT, // Western Europe
RT, // Middle East (Arabic, Hebrew)
TL, // Japanese, Chinese, Korean
TR; // Mongolian
public boolean isLT() { ... }
public boolean isRT() { ... }
public boolean isTL() { ... }
public boolean isTR() { ... }
</programlisting>
	<para>
		The object defining the Orientation for the current request is the <literal>UIPortalApplication</literal>. However, it should be accessed at runtime using the <literal>RequestContext</literal> that delegates to the <literal>UIPortalApplication</literal>.
	</para>
	<para>
		In case of <literal>PortalRequestContext</literal>, it directly delegates as the <literal>PortalRequestContext</literal> that has a reference to the current <literal>UIPortalApplication</literal>.
	</para>
	<para>
		In case of a different context, such as the <literal>PortletRequestContext</literal>, it delegates to the parent context given the fact that the root <literal>RequestContext</literal> is always a <literal>PortalRequestContext</literal>.
	</para>
	<section id="sect-Reference_Guide-RTL_Right_To_Left_Framework-Groovy_templates">
		<title>Groovy templates</title>
		<para>
			Orientation is defined by implicit variables in the Groovy binding context:
		</para>
		<variablelist>
			<varlistentry>
				<term><emphasis role="bold">Orientation</emphasis></term>
				<listitem>
					<para>
						The current orientation as an Orientation.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><emphasis role="bold">isLT</emphasis></term>
				<listitem>
					<para>
						The value of orientation.isLT().
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><emphasis role="bold">isRT</emphasis></term>
				<listitem>
					<para>
						The value of orientation.isRT().
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><emphasis role="bold">dir</emphasis></term>
				<listitem>
					<para>
						The string &#39;ltr&#39; if the orientation is LT or the string &#39;rtl&#39; if the orientation is RT.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
	</section>
	
	<section id="sect-Reference_Guide-RTL_Right_To_Left_Framework-Stylesheet">
		<title>Stylesheet</title>
		<para>
			The skin service handles stylesheet rewriting to accommodate the orientation. It works by appending -lt or -rt to the stylesheet name.
		</para>
		<para>
			For instance: <filename>/web/skin/portal/webui/component/UIFooterPortlet/DefaultStylesheet-rt.css</filename> will return the same stylesheet as <filename>/web/skin/portal/webui/component/UIFooterPortlet/DefaultStylesheet.css</filename> but processed for the RT orientation. The <parameter>-lt</parameter> suffix is optional.
		</para>
		<para>
			Stylesheet authors can annotate their stylesheet to create content that depends on the orientation.
		</para>
    
		<example>
			<para>
				In this example, the orientation is used to modify the float attribute that will make the horizontal tabs either float on left or on right:</para>
<programlisting role="CSS">float: left; /* orientation=lt */
float: right; /* orientation=rt */
font-weight: bold;
text-align: center;
white-space: nowrap;
</programlisting>

				 <para>The LT produced output will be:</para>
         
<programlisting role="CSS">float: left; /* orientation=lt */
font-weight: bold;
text-align: center;
white-space: nowrap;
</programlisting>
				 
         <para>The RT produced output will be:</para>
         
<programlisting role="CSS">float: right; /* orientation=rt */
font-weight: bold;
text-align: center;
white-space: nowrap;
</programlisting>
			</example>
		
		<example>
			<para>
				In this example, you need to modify the padding according to the orientation:</para>
        
<programlisting role="CSS">color: white;
line-height: 24px;
padding: 0px 5px 0px 0px; /* orientation=lt */
padding: 0px 0px 0px 5px; /* &#62;orientation=rt */
</programlisting>

				 <para>The LT produced output will be:</para>
         
<programlisting role="CSS">color: white;
line-height: 24px;
padding: 0px 5px 0px 0px; /* orientation=lt */
</programlisting>

				 <para>The RT produced output will be:</para>
         
<programlisting role="CSS">color: white;
line-height: 24px;
padding: 0px 0px 0px 5px; /* orientation=rt */
</programlisting>
		</example>
	</section>
	
	<section id="sect-Reference_Guide-RTL_Right_To_Left_Framework-Images">
		<title>Images</title>
		<para>
			Sometimes, it is necessary to create the RT version of an image that will be used from a template or from a stylesheet. However, symmetric images can be automatically generated avoiding the necessity to create a mirrored version of an image and furthermore avoiding maintenance cost.
		</para>
		<para>
			The web resource filter uses the same naming pattern as the skin service. When an image ends with the -rt suffix, the portal will attempt to locate the original image and create a mirror of it.
			For example, when <filename>/GateInResources/skin/DefaultSkin/webui/component/UITabSystem/UITabs/background/NormalTabStyle-rt.gif</filename> is requested, a mirror of <filename>/GateInResources/skin/DefaultSkin/webui/component/UITabSystem/UITabs/background/NormalTabStyle.gif</filename> is returned.
		</para>
		<note>
			<para>
				It is important to consider whether the image to be mirrored is symmetrical as this will impact its final appearance.
			</para>
		</note>
		<example>
			<title>Combine stylesheet and images:</title>
<programlisting role="CSS">line-height: 24px; 
background: url(&#39;background/NavigationTab.gif&#39;) no-repeat right top; /* orientation=lt */
background: url(&#39;background/NavigationTab-rt.gif&#39;) no-repeat left top; /* orientation=rt */
padding-right: 2px; /* orientation=lt */
padding-left: 2px; /* orientation=rt */</programlisting>
		</example>
  </section>
	
	<section id="sect-Reference_Guide-RTL_Right_To_Left_Framework-Client_side_JavaScript">
		<title>Client side JavaScript</title>
		<para>
			The <literal>eXo.core.I18n</literal> object provides the following parameters for orientation:
		</para>
		<variablelist>
			<varlistentry>
				<term><parameter>getOrientation()</parameter></term>
				<listitem>
					<para>
						Return either the string lt or rt.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>getDir()</parameter></term>
				<listitem>
					<para>
						Return either the string ltr or rtl.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>isLT()</parameter></term>
				<listitem>
					<para>
						Return true for LT.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>isRT()</parameter></term>
				<listitem>
					<para>
						Return true of RT.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
	</section>
</section>